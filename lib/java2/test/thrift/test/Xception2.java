/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.HashMap;
import java.util.Map;

public class Xception2 extends TException implements org.apache.thrift.TBase<Xception2, Xception2._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Xception2");

    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField STRUCT_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_thing", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new Xception2StandardSchemeFactory());
    }

    private int errorCode; // required
    private Xtruct struct_thing; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    private static final int __ERRORCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;

    public Xception2() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Xception2(Xception2 other) {
        __isset_bitfield = other.__isset_bitfield;
        this.errorCode = other.errorCode;
        if (other.isSetStruct_thing()) {
            this.struct_thing = new Xtruct(other.struct_thing);
        }
    }

    public Xception2 deepCopy() {
        return new Xception2(this);
    }

    public void clear() {
        setErrorCodeIsSet(false);
        this.errorCode = 0;
        this.struct_thing = null;
    }

    public int getErrorCode() {
        return this.errorCode;
    }

    public void setErrorCode(int errorCode) {
        this.errorCode = errorCode;
        setErrorCodeIsSet(true);
    }

    public void unsetErrorCode() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    /**
     * Returns true if field errorCode is set (has been assigned a value) and false otherwise
     */
    public boolean isSetErrorCode() {
        return EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    public void setErrorCodeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
    }

    public Xtruct getStruct_thing() {
        return this.struct_thing;
    }

    public void setStruct_thing(Xtruct struct_thing) {
        this.struct_thing = struct_thing;
    }

    public void unsetStruct_thing() {
        this.struct_thing = null;
    }

    /**
     * Returns true if field struct_thing is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStruct_thing() {
        return this.struct_thing != null;
    }

    public void setStruct_thingIsSet(boolean value) {
        if (!value) {
            this.struct_thing = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(Xception2 other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
        if (struct_thing != null) {
            struct_thing.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class Xception2StandardSchemeFactory implements SchemeFactory {

        public Xception2StandardScheme getScheme() {
            return new Xception2StandardScheme();
        }
    }

    private static class Xception2StandardScheme extends StandardScheme<Xception2> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Xception2 struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ERROR_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.errorCode = iprot.readI32();
                            struct.setErrorCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // STRUCT_THING
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.struct_thing = new Xtruct();
                            struct.struct_thing.read(iprot);
                            struct.setStruct_thingIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Xception2 struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
            oprot.writeI32(struct.errorCode);
            oprot.writeFieldEnd();
            if (struct.struct_thing != null) {
                oprot.writeFieldBegin(STRUCT_THING_FIELD_DESC);
                struct.struct_thing.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

