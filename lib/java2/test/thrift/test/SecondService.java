/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;

public class SecondService {

    public interface Iface {

        public void blahBlah() throws TException;

    }

    public interface AsyncIface {

        public Future<Void> blahBlah(AsyncMethodCallback<Void> callback) throws TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void blahBlah() throws TException {
            send_blahBlah();
            recv_blahBlah();
        }

        public void send_blahBlah() throws TException {
            blahBlah_args args = new blahBlah_args();
            sendBase("blahBlah", args);
        }

        public void recv_blahBlah() throws TException {
            blahBlah_result result = new blahBlah_result();
            receiveBase(result, "blahBlah");
            return;
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("blahBlah", new blahBlah());
            return processMap;
        }

        public static class blahBlah<I extends Iface> extends org.apache.thrift.ProcessFunction<I, blahBlah_args> {

            public blahBlah() {
                super("blahBlah");
            }

            public blahBlah_args getEmptyArgsInstance() {
                return new blahBlah_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public blahBlah_result getResult(I iface, blahBlah_args args) throws TException {
                blahBlah_result result = new blahBlah_result();
                iface.blahBlah();
                return result;
            }
        }

    }

    public static class blahBlah_args implements org.apache.thrift.TBase<blahBlah_args, blahBlah_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blahBlah_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new blahBlah_argsStandardSchemeFactory());
        }


        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        public blahBlah_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public blahBlah_args(blahBlah_args other) {
        }

        public blahBlah_args deepCopy() {
            return new blahBlah_args(this);
        }

        public void clear() {
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(blahBlah_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class blahBlah_argsStandardSchemeFactory implements SchemeFactory {

            public blahBlah_argsStandardScheme getScheme() {
                return new blahBlah_argsStandardScheme();
            }
        }

        private static class blahBlah_argsStandardScheme extends StandardScheme<blahBlah_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, blahBlah_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, blahBlah_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class blahBlah_result implements org.apache.thrift.TBase<blahBlah_result, blahBlah_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blahBlah_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new blahBlah_resultStandardSchemeFactory());
        }


        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        public blahBlah_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public blahBlah_result(blahBlah_result other) {
        }

        public blahBlah_result deepCopy() {
            return new blahBlah_result(this);
        }

        public void clear() {
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(blahBlah_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class blahBlah_resultStandardSchemeFactory implements SchemeFactory {

            public blahBlah_resultStandardScheme getScheme() {
                return new blahBlah_resultStandardScheme();
            }
        }

        private static class blahBlah_resultStandardScheme extends StandardScheme<blahBlah_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, blahBlah_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, blahBlah_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

}
