/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.HashMap;
import java.util.Map;

public class Xtruct3 implements org.apache.thrift.TBase<Xtruct3, Xtruct3._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Xtruct3");

    private static final org.apache.thrift.protocol.TField STRING_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("string_thing", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("changed", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField I32_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_thing", org.apache.thrift.protocol.TType.I32, (short) 9);
    private static final org.apache.thrift.protocol.TField I64_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_thing", org.apache.thrift.protocol.TType.I64, (short) 11);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new Xtruct3StandardSchemeFactory());
    }

    private String string_thing; // required
    private int changed; // required
    private int i32_thing; // required
    private long i64_thing; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    private static final int __CHANGED_ISSET_ID = 0;
    private static final int __I32_THING_ISSET_ID = 1;
    private static final int __I64_THING_ISSET_ID = 2;
    private byte __isset_bitfield = 0;

    public Xtruct3() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Xtruct3(Xtruct3 other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetString_thing()) {
            this.string_thing = other.string_thing;
        }
        this.changed = other.changed;
        this.i32_thing = other.i32_thing;
        this.i64_thing = other.i64_thing;
    }

    public Xtruct3 deepCopy() {
        return new Xtruct3(this);
    }

    public void clear() {
        this.string_thing = null;
        setChangedIsSet(false);
        this.changed = 0;
        setI32_thingIsSet(false);
        this.i32_thing = 0;
        setI64_thingIsSet(false);
        this.i64_thing = 0;
    }

    public String getString_thing() {
        return this.string_thing;
    }

    public void setString_thing(String string_thing) {
        this.string_thing = string_thing;
    }

    public void unsetString_thing() {
        this.string_thing = null;
    }

    /**
     * Returns true if field string_thing is set (has been assigned a value) and false otherwise
     */
    public boolean isSetString_thing() {
        return this.string_thing != null;
    }

    public void setString_thingIsSet(boolean value) {
        if (!value) {
            this.string_thing = null;
        }
    }

    public int getChanged() {
        return this.changed;
    }

    public void setChanged(int changed) {
        this.changed = changed;
        setChangedIsSet(true);
    }

    public void unsetChanged() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANGED_ISSET_ID);
    }

    /**
     * Returns true if field changed is set (has been assigned a value) and false otherwise
     */
    public boolean isSetChanged() {
        return EncodingUtils.testBit(__isset_bitfield, __CHANGED_ISSET_ID);
    }

    public void setChangedIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANGED_ISSET_ID, value);
    }

    public int getI32_thing() {
        return this.i32_thing;
    }

    public void setI32_thing(int i32_thing) {
        this.i32_thing = i32_thing;
        setI32_thingIsSet(true);
    }

    public void unsetI32_thing() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I32_THING_ISSET_ID);
    }

    /**
     * Returns true if field i32_thing is set (has been assigned a value) and false otherwise
     */
    public boolean isSetI32_thing() {
        return EncodingUtils.testBit(__isset_bitfield, __I32_THING_ISSET_ID);
    }

    public void setI32_thingIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I32_THING_ISSET_ID, value);
    }

    public long getI64_thing() {
        return this.i64_thing;
    }

    public void setI64_thing(long i64_thing) {
        this.i64_thing = i64_thing;
        setI64_thingIsSet(true);
    }

    public void unsetI64_thing() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64_THING_ISSET_ID);
    }

    /**
     * Returns true if field i64_thing is set (has been assigned a value) and false otherwise
     */
    public boolean isSetI64_thing() {
        return EncodingUtils.testBit(__isset_bitfield, __I64_THING_ISSET_ID);
    }

    public void setI64_thingIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64_THING_ISSET_ID, value);
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(Xtruct3 other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class Xtruct3StandardSchemeFactory implements SchemeFactory {

        public Xtruct3StandardScheme getScheme() {
            return new Xtruct3StandardScheme();
        }
    }

    private static class Xtruct3StandardScheme extends StandardScheme<Xtruct3> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Xtruct3 struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // STRING_THING
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.string_thing = iprot.readString();
                            struct.setString_thingIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // CHANGED
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.changed = iprot.readI32();
                            struct.setChangedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // I32_THING
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.i32_thing = iprot.readI32();
                            struct.setI32_thingIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // I64_THING
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.i64_thing = iprot.readI64();
                            struct.setI64_thingIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Xtruct3 struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.string_thing != null) {
                oprot.writeFieldBegin(STRING_THING_FIELD_DESC);
                oprot.writeString(struct.string_thing);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(CHANGED_FIELD_DESC);
            oprot.writeI32(struct.changed);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(I32_THING_FIELD_DESC);
            oprot.writeI32(struct.i32_thing);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(I64_THING_FIELD_DESC);
            oprot.writeI64(struct.i64_thing);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

