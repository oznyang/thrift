/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.*;
import java.util.concurrent.Future;

public class ThriftTest {

    public interface Iface {

        /**
         * Prints "testVoid()" and returns nothing.
         */
        public void testVoid() throws TException;

        /**
         * Prints 'testString("%s")' with thing as '%s'
         *
         * @param string thing - the string to print
         * @param thing
         * @return string - returns the string 'thing'
         */
        public String testString(String thing) throws TException;

        /**
         * Prints 'testByte("%d")' with thing as '%d'
         *
         * @param byte  thing - the byte to print
         * @param thing
         * @return byte - returns the byte 'thing'
         */
        public byte testByte(byte thing) throws TException;

        /**
         * Prints 'testI32("%d")' with thing as '%d'
         *
         * @param i32   thing - the i32 to print
         * @param thing
         * @return i32 - returns the i32 'thing'
         */
        public int testI32(int thing) throws TException;

        /**
         * Prints 'testI64("%d")' with thing as '%d'
         *
         * @param i64   thing - the i64 to print
         * @param thing
         * @return i64 - returns the i64 'thing'
         */
        public long testI64(long thing) throws TException;

        /**
         * Prints 'testDouble("%f")' with thing as '%f'
         *
         * @param double thing - the double to print
         * @param thing
         * @return double - returns the double 'thing'
         */
        public double testDouble(double thing) throws TException;

        /**
         * Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma seperated values
         *
         * @param Xtruct thing - the Xtruct to print
         * @param thing
         * @return Xtruct - returns the Xtruct 'thing'
         */
        public Xtruct testStruct(Xtruct thing) throws TException;

        /**
         * Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
         *
         * @param Xtruct2 thing - the Xtruct2 to print
         * @param thing
         * @return Xtruct2 - returns the Xtruct2 'thing'
         */
        public Xtruct2 testNest(Xtruct2 thing) throws TException;

        /**
         * Prints 'testMap("{%s")' where thing has been formatted into a string of  'key => value' pairs
         * seperated by commas and new lines
         *
         * @param map<i32,i32> thing - the map<i32,i32> to print
         * @param thing
         * @return map<i32,i32> - returns the map<i32,i32> 'thing'
         */
        public Map<Integer, Integer> testMap(Map<Integer, Integer> thing) throws TException;

        /**
         * Prints 'testStringMap("{%s}")' where thing has been formatted into a string of  'key => value' pairs
         * seperated by commas and new lines
         *
         * @param map<string,string> thing - the map<string,string> to print
         * @param thing
         * @return map<string,string> - returns the map<string,string> 'thing'
         */
        public Map<String, String> testStringMap(Map<String, String> thing) throws TException;

        /**
         * Prints 'testSet("{%s}")' where thing has been formatted into a string of  values
         * seperated by commas and new lines
         *
         * @param set<i32> thing - the set<i32> to print
         * @param thing
         * @return set<i32> - returns the set<i32> 'thing'
         */
        public Set<Integer> testSet(Set<Integer> thing) throws TException;

        /**
         * Prints 'testList("{%s}")' where thing has been formatted into a string of  values
         * seperated by commas and new lines
         *
         * @param list<i32> thing - the list<i32> to print
         * @param thing
         * @return list<i32> - returns the list<i32> 'thing'
         */
        public List<Integer> testList(List<Integer> thing) throws TException;

        /**
         * Prints 'testEnum("%d")' where thing has been formatted into it's numeric value
         *
         * @param Numberz thing - the Numberz to print
         * @param thing
         * @return Numberz - returns the Numberz 'thing'
         */
        public Numberz testEnum(Numberz thing) throws TException;

        /**
         * Prints 'testTypedef("%d")' with thing as '%d'
         *
         * @param UserId thing - the UserId to print
         * @param thing
         * @return UserId - returns the UserId 'thing'
         */
        public long testTypedef(long thing) throws TException;

        /**
         * Prints 'testMapMap("%d")' with hello as '%d'
         *
         * @param i32   hello - the i32 to print
         * @param hello
         * @return map<i32,map<i32,i32>> - returns a dictionary with these values:
         * {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
         */
        public Map<Integer, Map<Integer, Integer>> testMapMap(int hello) throws TException;

        /**
         * So you think you've got this all worked, out eh?
         * <p/>
         * Creates a the returned map with these values and prints it out:
         * { 1 => { 2 => argument,
         * 3 => argument,
         * },
         * 2 => { 6 => <empty Insanity struct>, },
         * }
         *
         * @param argument
         * @return map<UserId, map<Numberz,Insanity>> - a map with the above values
         */
        public Map<Long, Map<Numberz, Insanity>> testInsanity(Insanity argument) throws TException;

        /**
         * Prints 'testMulti()'
         *
         * @param byte     arg0 -
         * @param i32      arg1 -
         * @param i64      arg2 -
         * @param map<i16, string> arg3 -
         * @param Numberz  arg4 -
         * @param UserId   arg5 -
         * @param arg0
         * @param arg1
         * @param arg2
         * @param arg3
         * @param arg4
         * @param arg5
         * @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
         * and i64_thing = arg2
         */
        public Xtruct testMulti(byte arg0, int arg1, long arg2, Map<Short, String> arg3, Numberz arg4, long arg5) throws TException;

        /**
         * Print 'testException(%s)' with arg as '%s'
         *
         * @param string arg - a string indication what type of exception to throw
         *               if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
         *               elsen if arg == "TException" throw TException
         *               else do not throw anything
         * @param arg
         */
        public void testException(String arg) throws Xception, TException;

        /**
         * Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
         *
         * @param string arg - a string indication what type of exception to throw
         *               if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
         *               elsen if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and message = "This is an Xception2"
         *               else do not throw anything
         * @param arg0
         * @param arg1
         * @return Xtruct - an Xtruct with string_thing = arg1
         */
        public Xtruct testMultiException(String arg0, String arg1) throws Xception, Xception2, TException;

        /**
         * Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
         * sleep 'secondsToSleep'
         * Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
         *
         * @param i32            secondsToSleep - the number of seconds to sleep
         * @param secondsToSleep
         */
        public void testOneway(int secondsToSleep) throws TException;

    }

    public interface AsyncIface {

        public Future<Void> testVoid(AsyncMethodCallback<Void> callback) throws TException;

        public Future<String> testString(String thing, AsyncMethodCallback<String> callback) throws TException;

        public Future<Byte> testByte(byte thing, AsyncMethodCallback<Byte> callback) throws TException;

        public Future<Integer> testI32(int thing, AsyncMethodCallback<Integer> callback) throws TException;

        public Future<Long> testI64(long thing, AsyncMethodCallback<Long> callback) throws TException;

        public Future<Double> testDouble(double thing, AsyncMethodCallback<Double> callback) throws TException;

        public Future<Xtruct> testStruct(Xtruct thing, AsyncMethodCallback<Xtruct> callback) throws TException;

        public Future<Xtruct2> testNest(Xtruct2 thing, AsyncMethodCallback<Xtruct2> callback) throws TException;

        public Future<Map<Integer, Integer>> testMap(Map<Integer, Integer> thing, AsyncMethodCallback<Map<Integer, Integer>> callback) throws TException;

        public Future<Map<String, String>> testStringMap(Map<String, String> thing, AsyncMethodCallback<Map<String, String>> callback) throws TException;

        public Future<Set<Integer>> testSet(Set<Integer> thing, AsyncMethodCallback<Set<Integer>> callback) throws TException;

        public Future<List<Integer>> testList(List<Integer> thing, AsyncMethodCallback<List<Integer>> callback) throws TException;

        public Future<Numberz> testEnum(Numberz thing, AsyncMethodCallback<Numberz> callback) throws TException;

        public Future<Long> testTypedef(long thing, AsyncMethodCallback<Long> callback) throws TException;

        public Future<Map<Integer, Map<Integer, Integer>>> testMapMap(int hello, AsyncMethodCallback<Map<Integer, Map<Integer, Integer>>> callback) throws TException;

        public Future<Map<Long, Map<Numberz, Insanity>>> testInsanity(Insanity argument, AsyncMethodCallback<Map<Long, Map<Numberz, Insanity>>> callback) throws TException;

        public Future<Xtruct> testMulti(byte arg0, int arg1, long arg2, Map<Short, String> arg3, Numberz arg4, long arg5, AsyncMethodCallback<Xtruct> callback) throws TException;

        public Future<Void> testException(String arg, AsyncMethodCallback<Void> callback) throws TException;

        public Future<Xtruct> testMultiException(String arg0, String arg1, AsyncMethodCallback<Xtruct> callback) throws TException;

        public Future<Void> testOneway(int secondsToSleep, AsyncMethodCallback<Void> callback) throws TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void testVoid() throws TException {
            send_testVoid();
            recv_testVoid();
        }

        public void send_testVoid() throws TException {
            testVoid_args args = new testVoid_args();
            sendBase("testVoid", args);
        }

        public void recv_testVoid() throws TException {
            testVoid_result result = new testVoid_result();
            receiveBase(result, "testVoid");
            return;
        }

        public String testString(String thing) throws TException {
            send_testString(thing);
            return recv_testString();
        }

        public void send_testString(String thing) throws TException {
            testString_args args = new testString_args();
            args.setThing(thing);
            sendBase("testString", args);
        }

        public String recv_testString() throws TException {
            testString_result result = new testString_result();
            receiveBase(result, "testString");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testString failed: unknown result");
        }

        public byte testByte(byte thing) throws TException {
            send_testByte(thing);
            return recv_testByte();
        }

        public void send_testByte(byte thing) throws TException {
            testByte_args args = new testByte_args();
            args.setThing(thing);
            sendBase("testByte", args);
        }

        public byte recv_testByte() throws TException {
            testByte_result result = new testByte_result();
            receiveBase(result, "testByte");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testByte failed: unknown result");
        }

        public int testI32(int thing) throws TException {
            send_testI32(thing);
            return recv_testI32();
        }

        public void send_testI32(int thing) throws TException {
            testI32_args args = new testI32_args();
            args.setThing(thing);
            sendBase("testI32", args);
        }

        public int recv_testI32() throws TException {
            testI32_result result = new testI32_result();
            receiveBase(result, "testI32");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testI32 failed: unknown result");
        }

        public long testI64(long thing) throws TException {
            send_testI64(thing);
            return recv_testI64();
        }

        public void send_testI64(long thing) throws TException {
            testI64_args args = new testI64_args();
            args.setThing(thing);
            sendBase("testI64", args);
        }

        public long recv_testI64() throws TException {
            testI64_result result = new testI64_result();
            receiveBase(result, "testI64");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testI64 failed: unknown result");
        }

        public double testDouble(double thing) throws TException {
            send_testDouble(thing);
            return recv_testDouble();
        }

        public void send_testDouble(double thing) throws TException {
            testDouble_args args = new testDouble_args();
            args.setThing(thing);
            sendBase("testDouble", args);
        }

        public double recv_testDouble() throws TException {
            testDouble_result result = new testDouble_result();
            receiveBase(result, "testDouble");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testDouble failed: unknown result");
        }

        public Xtruct testStruct(Xtruct thing) throws TException {
            send_testStruct(thing);
            return recv_testStruct();
        }

        public void send_testStruct(Xtruct thing) throws TException {
            testStruct_args args = new testStruct_args();
            args.setThing(thing);
            sendBase("testStruct", args);
        }

        public Xtruct recv_testStruct() throws TException {
            testStruct_result result = new testStruct_result();
            receiveBase(result, "testStruct");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testStruct failed: unknown result");
        }

        public Xtruct2 testNest(Xtruct2 thing) throws TException {
            send_testNest(thing);
            return recv_testNest();
        }

        public void send_testNest(Xtruct2 thing) throws TException {
            testNest_args args = new testNest_args();
            args.setThing(thing);
            sendBase("testNest", args);
        }

        public Xtruct2 recv_testNest() throws TException {
            testNest_result result = new testNest_result();
            receiveBase(result, "testNest");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testNest failed: unknown result");
        }

        public Map<Integer, Integer> testMap(Map<Integer, Integer> thing) throws TException {
            send_testMap(thing);
            return recv_testMap();
        }

        public void send_testMap(Map<Integer, Integer> thing) throws TException {
            testMap_args args = new testMap_args();
            args.setThing(thing);
            sendBase("testMap", args);
        }

        public Map<Integer, Integer> recv_testMap() throws TException {
            testMap_result result = new testMap_result();
            receiveBase(result, "testMap");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testMap failed: unknown result");
        }

        public Map<String, String> testStringMap(Map<String, String> thing) throws TException {
            send_testStringMap(thing);
            return recv_testStringMap();
        }

        public void send_testStringMap(Map<String, String> thing) throws TException {
            testStringMap_args args = new testStringMap_args();
            args.setThing(thing);
            sendBase("testStringMap", args);
        }

        public Map<String, String> recv_testStringMap() throws TException {
            testStringMap_result result = new testStringMap_result();
            receiveBase(result, "testStringMap");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testStringMap failed: unknown result");
        }

        public Set<Integer> testSet(Set<Integer> thing) throws TException {
            send_testSet(thing);
            return recv_testSet();
        }

        public void send_testSet(Set<Integer> thing) throws TException {
            testSet_args args = new testSet_args();
            args.setThing(thing);
            sendBase("testSet", args);
        }

        public Set<Integer> recv_testSet() throws TException {
            testSet_result result = new testSet_result();
            receiveBase(result, "testSet");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testSet failed: unknown result");
        }

        public List<Integer> testList(List<Integer> thing) throws TException {
            send_testList(thing);
            return recv_testList();
        }

        public void send_testList(List<Integer> thing) throws TException {
            testList_args args = new testList_args();
            args.setThing(thing);
            sendBase("testList", args);
        }

        public List<Integer> recv_testList() throws TException {
            testList_result result = new testList_result();
            receiveBase(result, "testList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testList failed: unknown result");
        }

        public Numberz testEnum(Numberz thing) throws TException {
            send_testEnum(thing);
            return recv_testEnum();
        }

        public void send_testEnum(Numberz thing) throws TException {
            testEnum_args args = new testEnum_args();
            args.setThing(thing);
            sendBase("testEnum", args);
        }

        public Numberz recv_testEnum() throws TException {
            testEnum_result result = new testEnum_result();
            receiveBase(result, "testEnum");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testEnum failed: unknown result");
        }

        public long testTypedef(long thing) throws TException {
            send_testTypedef(thing);
            return recv_testTypedef();
        }

        public void send_testTypedef(long thing) throws TException {
            testTypedef_args args = new testTypedef_args();
            args.setThing(thing);
            sendBase("testTypedef", args);
        }

        public long recv_testTypedef() throws TException {
            testTypedef_result result = new testTypedef_result();
            receiveBase(result, "testTypedef");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testTypedef failed: unknown result");
        }

        public Map<Integer, Map<Integer, Integer>> testMapMap(int hello) throws TException {
            send_testMapMap(hello);
            return recv_testMapMap();
        }

        public void send_testMapMap(int hello) throws TException {
            testMapMap_args args = new testMapMap_args();
            args.setHello(hello);
            sendBase("testMapMap", args);
        }

        public Map<Integer, Map<Integer, Integer>> recv_testMapMap() throws TException {
            testMapMap_result result = new testMapMap_result();
            receiveBase(result, "testMapMap");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testMapMap failed: unknown result");
        }

        public Map<Long, Map<Numberz, Insanity>> testInsanity(Insanity argument) throws TException {
            send_testInsanity(argument);
            return recv_testInsanity();
        }

        public void send_testInsanity(Insanity argument) throws TException {
            testInsanity_args args = new testInsanity_args();
            args.setArgument(argument);
            sendBase("testInsanity", args);
        }

        public Map<Long, Map<Numberz, Insanity>> recv_testInsanity() throws TException {
            testInsanity_result result = new testInsanity_result();
            receiveBase(result, "testInsanity");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testInsanity failed: unknown result");
        }

        public Xtruct testMulti(byte arg0, int arg1, long arg2, Map<Short, String> arg3, Numberz arg4, long arg5) throws TException {
            send_testMulti(arg0, arg1, arg2, arg3, arg4, arg5);
            return recv_testMulti();
        }

        public void send_testMulti(byte arg0, int arg1, long arg2, Map<Short, String> arg3, Numberz arg4, long arg5) throws TException {
            testMulti_args args = new testMulti_args();
            args.setArg0(arg0);
            args.setArg1(arg1);
            args.setArg2(arg2);
            args.setArg3(arg3);
            args.setArg4(arg4);
            args.setArg5(arg5);
            sendBase("testMulti", args);
        }

        public Xtruct recv_testMulti() throws TException {
            testMulti_result result = new testMulti_result();
            receiveBase(result, "testMulti");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testMulti failed: unknown result");
        }

        public void testException(String arg) throws Xception, TException {
            send_testException(arg);
            recv_testException();
        }

        public void send_testException(String arg) throws TException {
            testException_args args = new testException_args();
            args.setArg(arg);
            sendBase("testException", args);
        }

        public void recv_testException() throws Xception, TException {
            testException_result result = new testException_result();
            receiveBase(result, "testException");
            if (result.err1 != null) {
                throw result.err1;
            }
            return;
        }

        public Xtruct testMultiException(String arg0, String arg1) throws Xception, Xception2, TException {
            send_testMultiException(arg0, arg1);
            return recv_testMultiException();
        }

        public void send_testMultiException(String arg0, String arg1) throws TException {
            testMultiException_args args = new testMultiException_args();
            args.setArg0(arg0);
            args.setArg1(arg1);
            sendBase("testMultiException", args);
        }

        public Xtruct recv_testMultiException() throws Xception, Xception2, TException {
            testMultiException_result result = new testMultiException_result();
            receiveBase(result, "testMultiException");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.err1 != null) {
                throw result.err1;
            }
            if (result.err2 != null) {
                throw result.err2;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testMultiException failed: unknown result");
        }

        public void testOneway(int secondsToSleep) throws TException {
            send_testOneway(secondsToSleep);
        }

        public void send_testOneway(int secondsToSleep) throws TException {
            testOneway_args args = new testOneway_args();
            args.setSecondsToSleep(secondsToSleep);
            sendBase("testOneway", args);
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("testVoid", new testVoid());
            processMap.put("testString", new testString());
            processMap.put("testByte", new testByte());
            processMap.put("testI32", new testI32());
            processMap.put("testI64", new testI64());
            processMap.put("testDouble", new testDouble());
            processMap.put("testStruct", new testStruct());
            processMap.put("testNest", new testNest());
            processMap.put("testMap", new testMap());
            processMap.put("testStringMap", new testStringMap());
            processMap.put("testSet", new testSet());
            processMap.put("testList", new testList());
            processMap.put("testEnum", new testEnum());
            processMap.put("testTypedef", new testTypedef());
            processMap.put("testMapMap", new testMapMap());
            processMap.put("testInsanity", new testInsanity());
            processMap.put("testMulti", new testMulti());
            processMap.put("testException", new testException());
            processMap.put("testMultiException", new testMultiException());
            processMap.put("testOneway", new testOneway());
            return processMap;
        }

        public static class testVoid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testVoid_args> {

            public testVoid() {
                super("testVoid");
            }

            public testVoid_args getEmptyArgsInstance() {
                return new testVoid_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testVoid_result getResult(I iface, testVoid_args args) throws TException {
                testVoid_result result = new testVoid_result();
                iface.testVoid();
                return result;
            }
        }

        public static class testString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testString_args> {

            public testString() {
                super("testString");
            }

            public testString_args getEmptyArgsInstance() {
                return new testString_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testString_result getResult(I iface, testString_args args) throws TException {
                testString_result result = new testString_result();
                result.success = iface.testString(args.thing);
                return result;
            }
        }

        public static class testByte<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testByte_args> {

            public testByte() {
                super("testByte");
            }

            public testByte_args getEmptyArgsInstance() {
                return new testByte_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testByte_result getResult(I iface, testByte_args args) throws TException {
                testByte_result result = new testByte_result();
                result.success = iface.testByte(args.thing);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class testI32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testI32_args> {

            public testI32() {
                super("testI32");
            }

            public testI32_args getEmptyArgsInstance() {
                return new testI32_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testI32_result getResult(I iface, testI32_args args) throws TException {
                testI32_result result = new testI32_result();
                result.success = iface.testI32(args.thing);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class testI64<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testI64_args> {

            public testI64() {
                super("testI64");
            }

            public testI64_args getEmptyArgsInstance() {
                return new testI64_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testI64_result getResult(I iface, testI64_args args) throws TException {
                testI64_result result = new testI64_result();
                result.success = iface.testI64(args.thing);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class testDouble<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testDouble_args> {

            public testDouble() {
                super("testDouble");
            }

            public testDouble_args getEmptyArgsInstance() {
                return new testDouble_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testDouble_result getResult(I iface, testDouble_args args) throws TException {
                testDouble_result result = new testDouble_result();
                result.success = iface.testDouble(args.thing);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class testStruct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testStruct_args> {

            public testStruct() {
                super("testStruct");
            }

            public testStruct_args getEmptyArgsInstance() {
                return new testStruct_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testStruct_result getResult(I iface, testStruct_args args) throws TException {
                testStruct_result result = new testStruct_result();
                result.success = iface.testStruct(args.thing);
                return result;
            }
        }

        public static class testNest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testNest_args> {

            public testNest() {
                super("testNest");
            }

            public testNest_args getEmptyArgsInstance() {
                return new testNest_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testNest_result getResult(I iface, testNest_args args) throws TException {
                testNest_result result = new testNest_result();
                result.success = iface.testNest(args.thing);
                return result;
            }
        }

        public static class testMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testMap_args> {

            public testMap() {
                super("testMap");
            }

            public testMap_args getEmptyArgsInstance() {
                return new testMap_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testMap_result getResult(I iface, testMap_args args) throws TException {
                testMap_result result = new testMap_result();
                result.success = iface.testMap(args.thing);
                return result;
            }
        }

        public static class testStringMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testStringMap_args> {

            public testStringMap() {
                super("testStringMap");
            }

            public testStringMap_args getEmptyArgsInstance() {
                return new testStringMap_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testStringMap_result getResult(I iface, testStringMap_args args) throws TException {
                testStringMap_result result = new testStringMap_result();
                result.success = iface.testStringMap(args.thing);
                return result;
            }
        }

        public static class testSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testSet_args> {

            public testSet() {
                super("testSet");
            }

            public testSet_args getEmptyArgsInstance() {
                return new testSet_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testSet_result getResult(I iface, testSet_args args) throws TException {
                testSet_result result = new testSet_result();
                result.success = iface.testSet(args.thing);
                return result;
            }
        }

        public static class testList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testList_args> {

            public testList() {
                super("testList");
            }

            public testList_args getEmptyArgsInstance() {
                return new testList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testList_result getResult(I iface, testList_args args) throws TException {
                testList_result result = new testList_result();
                result.success = iface.testList(args.thing);
                return result;
            }
        }

        public static class testEnum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testEnum_args> {

            public testEnum() {
                super("testEnum");
            }

            public testEnum_args getEmptyArgsInstance() {
                return new testEnum_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testEnum_result getResult(I iface, testEnum_args args) throws TException {
                testEnum_result result = new testEnum_result();
                result.success = iface.testEnum(args.thing);
                return result;
            }
        }

        public static class testTypedef<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testTypedef_args> {

            public testTypedef() {
                super("testTypedef");
            }

            public testTypedef_args getEmptyArgsInstance() {
                return new testTypedef_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testTypedef_result getResult(I iface, testTypedef_args args) throws TException {
                testTypedef_result result = new testTypedef_result();
                result.success = iface.testTypedef(args.thing);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class testMapMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testMapMap_args> {

            public testMapMap() {
                super("testMapMap");
            }

            public testMapMap_args getEmptyArgsInstance() {
                return new testMapMap_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testMapMap_result getResult(I iface, testMapMap_args args) throws TException {
                testMapMap_result result = new testMapMap_result();
                result.success = iface.testMapMap(args.hello);
                return result;
            }
        }

        public static class testInsanity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testInsanity_args> {

            public testInsanity() {
                super("testInsanity");
            }

            public testInsanity_args getEmptyArgsInstance() {
                return new testInsanity_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testInsanity_result getResult(I iface, testInsanity_args args) throws TException {
                testInsanity_result result = new testInsanity_result();
                result.success = iface.testInsanity(args.argument);
                return result;
            }
        }

        public static class testMulti<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testMulti_args> {

            public testMulti() {
                super("testMulti");
            }

            public testMulti_args getEmptyArgsInstance() {
                return new testMulti_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testMulti_result getResult(I iface, testMulti_args args) throws TException {
                testMulti_result result = new testMulti_result();
                result.success = iface.testMulti(args.arg0, args.arg1, args.arg2, args.arg3, args.arg4, args.arg5);
                return result;
            }
        }

        public static class testException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testException_args> {

            public testException() {
                super("testException");
            }

            public testException_args getEmptyArgsInstance() {
                return new testException_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testException_result getResult(I iface, testException_args args) throws TException {
                testException_result result = new testException_result();
                try {
                    iface.testException(args.arg);
                } catch (Xception err1) {
                    result.err1 = err1;
                }
                return result;
            }
        }

        public static class testMultiException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testMultiException_args> {

            public testMultiException() {
                super("testMultiException");
            }

            public testMultiException_args getEmptyArgsInstance() {
                return new testMultiException_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testMultiException_result getResult(I iface, testMultiException_args args) throws TException {
                testMultiException_result result = new testMultiException_result();
                try {
                    result.success = iface.testMultiException(args.arg0, args.arg1);
                } catch (Xception err1) {
                    result.err1 = err1;
                } catch (Xception2 err2) {
                    result.err2 = err2;
                }
                return result;
            }
        }

        public static class testOneway<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testOneway_args> {

            public testOneway() {
                super("testOneway");
            }

            public testOneway_args getEmptyArgsInstance() {
                return new testOneway_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, testOneway_args args) throws TException {
                iface.testOneway(args.secondsToSleep);
                return null;
            }
        }

    }

    public static class testVoid_args implements org.apache.thrift.TBase<testVoid_args, testVoid_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testVoid_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testVoid_argsStandardSchemeFactory());
        }


        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        public testVoid_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testVoid_args(testVoid_args other) {
        }

        public testVoid_args deepCopy() {
            return new testVoid_args(this);
        }

        public void clear() {
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testVoid_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testVoid_argsStandardSchemeFactory implements SchemeFactory {

            public testVoid_argsStandardScheme getScheme() {
                return new testVoid_argsStandardScheme();
            }
        }

        private static class testVoid_argsStandardScheme extends StandardScheme<testVoid_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testVoid_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testVoid_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testVoid_result implements org.apache.thrift.TBase<testVoid_result, testVoid_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testVoid_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testVoid_resultStandardSchemeFactory());
        }


        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        public testVoid_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testVoid_result(testVoid_result other) {
        }

        public testVoid_result deepCopy() {
            return new testVoid_result(this);
        }

        public void clear() {
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testVoid_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testVoid_resultStandardSchemeFactory implements SchemeFactory {

            public testVoid_resultStandardScheme getScheme() {
                return new testVoid_resultStandardScheme();
            }
        }

        private static class testVoid_resultStandardScheme extends StandardScheme<testVoid_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testVoid_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testVoid_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testString_args implements org.apache.thrift.TBase<testString_args, testString_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testString_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testString_argsStandardSchemeFactory());
        }

        private String thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testString_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testString_args(testString_args other) {
            if (other.isSetThing()) {
                this.thing = other.thing;
            }
        }

        public testString_args deepCopy() {
            return new testString_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        public String getThing() {
            return this.thing;
        }

        public void setThing(String thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testString_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testString_argsStandardSchemeFactory implements SchemeFactory {

            public testString_argsStandardScheme getScheme() {
                return new testString_argsStandardScheme();
            }
        }

        private static class testString_argsStandardScheme extends StandardScheme<testString_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testString_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.thing = iprot.readString();
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testString_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    oprot.writeString(struct.thing);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testString_result implements org.apache.thrift.TBase<testString_result, testString_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testString_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testString_resultStandardSchemeFactory());
        }

        private String success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testString_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testString_result(testString_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public testString_result deepCopy() {
            return new testString_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public void setSuccess(String success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testString_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testString_resultStandardSchemeFactory implements SchemeFactory {

            public testString_resultStandardScheme getScheme() {
                return new testString_resultStandardScheme();
            }
        }

        private static class testString_resultStandardScheme extends StandardScheme<testString_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testString_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testString_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testByte_args implements org.apache.thrift.TBase<testByte_args, testByte_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testByte_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.BYTE, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testByte_argsStandardSchemeFactory());
        }

        private byte thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __THING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testByte_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testByte_args(testByte_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.thing = other.thing;
        }

        public testByte_args deepCopy() {
            return new testByte_args(this);
        }

        public void clear() {
            setThingIsSet(false);
            this.thing = 0;
        }

        public byte getThing() {
            return this.thing;
        }

        public void setThing(byte thing) {
            this.thing = thing;
            setThingIsSet(true);
        }

        public void unsetThing() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THING_ISSET_ID);
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return EncodingUtils.testBit(__isset_bitfield, __THING_ISSET_ID);
        }

        public void setThingIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THING_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testByte_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testByte_argsStandardSchemeFactory implements SchemeFactory {

            public testByte_argsStandardScheme getScheme() {
                return new testByte_argsStandardScheme();
            }
        }

        private static class testByte_argsStandardScheme extends StandardScheme<testByte_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testByte_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.thing = iprot.readByte();
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testByte_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(THING_FIELD_DESC);
                oprot.writeByte(struct.thing);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testByte_result implements org.apache.thrift.TBase<testByte_result, testByte_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testByte_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testByte_resultStandardSchemeFactory());
        }

        private byte success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testByte_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testByte_result(testByte_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public testByte_result deepCopy() {
            return new testByte_result(this);
        }

        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public byte getSuccess() {
            return this.success;
        }

        public void setSuccess(byte success) {
            this.success = success;
            setSuccessIsSet(true);
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testByte_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testByte_resultStandardSchemeFactory implements SchemeFactory {

            public testByte_resultStandardScheme getScheme() {
                return new testByte_resultStandardScheme();
            }
        }

        private static class testByte_resultStandardScheme extends StandardScheme<testByte_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testByte_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.success = iprot.readByte();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testByte_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeByte(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testI32_args implements org.apache.thrift.TBase<testI32_args, testI32_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testI32_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testI32_argsStandardSchemeFactory());
        }

        private int thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __THING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testI32_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testI32_args(testI32_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.thing = other.thing;
        }

        public testI32_args deepCopy() {
            return new testI32_args(this);
        }

        public void clear() {
            setThingIsSet(false);
            this.thing = 0;
        }

        public int getThing() {
            return this.thing;
        }

        public void setThing(int thing) {
            this.thing = thing;
            setThingIsSet(true);
        }

        public void unsetThing() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THING_ISSET_ID);
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return EncodingUtils.testBit(__isset_bitfield, __THING_ISSET_ID);
        }

        public void setThingIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THING_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testI32_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testI32_argsStandardSchemeFactory implements SchemeFactory {

            public testI32_argsStandardScheme getScheme() {
                return new testI32_argsStandardScheme();
            }
        }

        private static class testI32_argsStandardScheme extends StandardScheme<testI32_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testI32_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.thing = iprot.readI32();
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testI32_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(THING_FIELD_DESC);
                oprot.writeI32(struct.thing);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testI32_result implements org.apache.thrift.TBase<testI32_result, testI32_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testI32_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testI32_resultStandardSchemeFactory());
        }

        private int success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testI32_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testI32_result(testI32_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public testI32_result deepCopy() {
            return new testI32_result(this);
        }

        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public void setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testI32_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testI32_resultStandardSchemeFactory implements SchemeFactory {

            public testI32_resultStandardScheme getScheme() {
                return new testI32_resultStandardScheme();
            }
        }

        private static class testI32_resultStandardScheme extends StandardScheme<testI32_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testI32_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testI32_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testI64_args implements org.apache.thrift.TBase<testI64_args, testI64_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testI64_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.I64, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testI64_argsStandardSchemeFactory());
        }

        private long thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __THING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testI64_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testI64_args(testI64_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.thing = other.thing;
        }

        public testI64_args deepCopy() {
            return new testI64_args(this);
        }

        public void clear() {
            setThingIsSet(false);
            this.thing = 0;
        }

        public long getThing() {
            return this.thing;
        }

        public void setThing(long thing) {
            this.thing = thing;
            setThingIsSet(true);
        }

        public void unsetThing() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THING_ISSET_ID);
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return EncodingUtils.testBit(__isset_bitfield, __THING_ISSET_ID);
        }

        public void setThingIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THING_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testI64_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testI64_argsStandardSchemeFactory implements SchemeFactory {

            public testI64_argsStandardScheme getScheme() {
                return new testI64_argsStandardScheme();
            }
        }

        private static class testI64_argsStandardScheme extends StandardScheme<testI64_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testI64_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.thing = iprot.readI64();
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testI64_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(THING_FIELD_DESC);
                oprot.writeI64(struct.thing);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testI64_result implements org.apache.thrift.TBase<testI64_result, testI64_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testI64_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testI64_resultStandardSchemeFactory());
        }

        private long success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testI64_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testI64_result(testI64_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public testI64_result deepCopy() {
            return new testI64_result(this);
        }

        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        public void setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testI64_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testI64_resultStandardSchemeFactory implements SchemeFactory {

            public testI64_resultStandardScheme getScheme() {
                return new testI64_resultStandardScheme();
            }
        }

        private static class testI64_resultStandardScheme extends StandardScheme<testI64_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testI64_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testI64_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testDouble_args implements org.apache.thrift.TBase<testDouble_args, testDouble_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testDouble_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.DOUBLE, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testDouble_argsStandardSchemeFactory());
        }

        private double thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __THING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testDouble_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testDouble_args(testDouble_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.thing = other.thing;
        }

        public testDouble_args deepCopy() {
            return new testDouble_args(this);
        }

        public void clear() {
            setThingIsSet(false);
            this.thing = 0.0;
        }

        public double getThing() {
            return this.thing;
        }

        public void setThing(double thing) {
            this.thing = thing;
            setThingIsSet(true);
        }

        public void unsetThing() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THING_ISSET_ID);
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return EncodingUtils.testBit(__isset_bitfield, __THING_ISSET_ID);
        }

        public void setThingIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THING_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testDouble_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testDouble_argsStandardSchemeFactory implements SchemeFactory {

            public testDouble_argsStandardScheme getScheme() {
                return new testDouble_argsStandardScheme();
            }
        }

        private static class testDouble_argsStandardScheme extends StandardScheme<testDouble_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testDouble_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.thing = iprot.readDouble();
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testDouble_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(THING_FIELD_DESC);
                oprot.writeDouble(struct.thing);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testDouble_result implements org.apache.thrift.TBase<testDouble_result, testDouble_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testDouble_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testDouble_resultStandardSchemeFactory());
        }

        private double success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testDouble_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testDouble_result(testDouble_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public testDouble_result deepCopy() {
            return new testDouble_result(this);
        }

        public void clear() {
            setSuccessIsSet(false);
            this.success = 0.0;
        }

        public double getSuccess() {
            return this.success;
        }

        public void setSuccess(double success) {
            this.success = success;
            setSuccessIsSet(true);
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testDouble_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testDouble_resultStandardSchemeFactory implements SchemeFactory {

            public testDouble_resultStandardScheme getScheme() {
                return new testDouble_resultStandardScheme();
            }
        }

        private static class testDouble_resultStandardScheme extends StandardScheme<testDouble_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testDouble_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.success = iprot.readDouble();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testDouble_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeDouble(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testStruct_args implements org.apache.thrift.TBase<testStruct_args, testStruct_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testStruct_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testStruct_argsStandardSchemeFactory());
        }

        private Xtruct thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testStruct_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testStruct_args(testStruct_args other) {
            if (other.isSetThing()) {
                this.thing = new Xtruct(other.thing);
            }
        }

        public testStruct_args deepCopy() {
            return new testStruct_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        public Xtruct getThing() {
            return this.thing;
        }

        public void setThing(Xtruct thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testStruct_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (thing != null) {
                thing.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testStruct_argsStandardSchemeFactory implements SchemeFactory {

            public testStruct_argsStandardScheme getScheme() {
                return new testStruct_argsStandardScheme();
            }
        }

        private static class testStruct_argsStandardScheme extends StandardScheme<testStruct_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testStruct_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.thing = new Xtruct();
                                struct.thing.read(iprot);
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testStruct_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    struct.thing.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testStruct_result implements org.apache.thrift.TBase<testStruct_result, testStruct_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testStruct_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testStruct_resultStandardSchemeFactory());
        }

        private Xtruct success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testStruct_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testStruct_result(testStruct_result other) {
            if (other.isSetSuccess()) {
                this.success = new Xtruct(other.success);
            }
        }

        public testStruct_result deepCopy() {
            return new testStruct_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public Xtruct getSuccess() {
            return this.success;
        }

        public void setSuccess(Xtruct success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testStruct_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testStruct_resultStandardSchemeFactory implements SchemeFactory {

            public testStruct_resultStandardScheme getScheme() {
                return new testStruct_resultStandardScheme();
            }
        }

        private static class testStruct_resultStandardScheme extends StandardScheme<testStruct_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testStruct_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new Xtruct();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testStruct_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testNest_args implements org.apache.thrift.TBase<testNest_args, testNest_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testNest_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testNest_argsStandardSchemeFactory());
        }

        private Xtruct2 thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testNest_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testNest_args(testNest_args other) {
            if (other.isSetThing()) {
                this.thing = new Xtruct2(other.thing);
            }
        }

        public testNest_args deepCopy() {
            return new testNest_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        public Xtruct2 getThing() {
            return this.thing;
        }

        public void setThing(Xtruct2 thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testNest_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (thing != null) {
                thing.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testNest_argsStandardSchemeFactory implements SchemeFactory {

            public testNest_argsStandardScheme getScheme() {
                return new testNest_argsStandardScheme();
            }
        }

        private static class testNest_argsStandardScheme extends StandardScheme<testNest_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testNest_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.thing = new Xtruct2();
                                struct.thing.read(iprot);
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testNest_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    struct.thing.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testNest_result implements org.apache.thrift.TBase<testNest_result, testNest_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testNest_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testNest_resultStandardSchemeFactory());
        }

        private Xtruct2 success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testNest_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testNest_result(testNest_result other) {
            if (other.isSetSuccess()) {
                this.success = new Xtruct2(other.success);
            }
        }

        public testNest_result deepCopy() {
            return new testNest_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public Xtruct2 getSuccess() {
            return this.success;
        }

        public void setSuccess(Xtruct2 success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testNest_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testNest_resultStandardSchemeFactory implements SchemeFactory {

            public testNest_resultStandardScheme getScheme() {
                return new testNest_resultStandardScheme();
            }
        }

        private static class testNest_resultStandardScheme extends StandardScheme<testNest_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testNest_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new Xtruct2();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testNest_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMap_args implements org.apache.thrift.TBase<testMap_args, testMap_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMap_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.MAP, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMap_argsStandardSchemeFactory());
        }

        private Map<Integer, Integer> thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testMap_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMap_args(testMap_args other) {
            if (other.isSetThing()) {
                Map<Integer, Integer> __this__thing = new LinkedHashMap<Integer, Integer>();
                for (Map.Entry<Integer, Integer> other_element : other.thing.entrySet()) {

                    Integer other_element_key = other_element.getKey();
                    Integer other_element_value = other_element.getValue();

                    Integer __this__thing_copy_key = other_element_key;

                    Integer __this__thing_copy_value = other_element_value;

                    __this__thing.put(__this__thing_copy_key, __this__thing_copy_value);
                }
                this.thing = __this__thing;
            }
        }

        public testMap_args deepCopy() {
            return new testMap_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        public int getThingSize() {
            return (this.thing == null) ? 0 : this.thing.size();
        }

        public void putToThing(int key, int val) {
            if (this.thing == null) {
                this.thing = new LinkedHashMap<Integer, Integer>();
            }
            this.thing.put(key, val);
        }

        public Map<Integer, Integer> getThing() {
            return this.thing;
        }

        public void setThing(Map<Integer, Integer> thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMap_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMap_argsStandardSchemeFactory implements SchemeFactory {

            public testMap_argsStandardScheme getScheme() {
                return new testMap_argsStandardScheme();
            }
        }

        private static class testMap_argsStandardScheme extends StandardScheme<testMap_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMap_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map144 = iprot.readMapBegin();
                                    struct.thing = new LinkedHashMap<Integer, Integer>(2 * _map144.size);
                                    for (int _i145 = 0; _i145 < _map144.size; ++_i145) {
                                        int _key146; // required
                                        int _val147; // required
                                        _key146 = iprot.readI32();
                                        _val147 = iprot.readI32();
                                        struct.thing.put(_key146, _val147);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMap_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.thing.size()));
                        for (Map.Entry<Integer, Integer> _iter148 : struct.thing.entrySet()) {
                            oprot.writeI32(_iter148.getKey());
                            oprot.writeI32(_iter148.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMap_result implements org.apache.thrift.TBase<testMap_result, testMap_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMap_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMap_resultStandardSchemeFactory());
        }

        private Map<Integer, Integer> success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testMap_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMap_result(testMap_result other) {
            if (other.isSetSuccess()) {
                Map<Integer, Integer> __this__success = new LinkedHashMap<Integer, Integer>();
                for (Map.Entry<Integer, Integer> other_element : other.success.entrySet()) {

                    Integer other_element_key = other_element.getKey();
                    Integer other_element_value = other_element.getValue();

                    Integer __this__success_copy_key = other_element_key;

                    Integer __this__success_copy_value = other_element_value;

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public testMap_result deepCopy() {
            return new testMap_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(int key, int val) {
            if (this.success == null) {
                this.success = new LinkedHashMap<Integer, Integer>();
            }
            this.success.put(key, val);
        }

        public Map<Integer, Integer> getSuccess() {
            return this.success;
        }

        public void setSuccess(Map<Integer, Integer> success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMap_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMap_resultStandardSchemeFactory implements SchemeFactory {

            public testMap_resultStandardScheme getScheme() {
                return new testMap_resultStandardScheme();
            }
        }

        private static class testMap_resultStandardScheme extends StandardScheme<testMap_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMap_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map149 = iprot.readMapBegin();
                                    struct.success = new LinkedHashMap<Integer, Integer>(2 * _map149.size);
                                    for (int _i150 = 0; _i150 < _map149.size; ++_i150) {
                                        int _key151; // required
                                        int _val152; // required
                                        _key151 = iprot.readI32();
                                        _val152 = iprot.readI32();
                                        struct.success.put(_key151, _val152);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMap_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (Map.Entry<Integer, Integer> _iter153 : struct.success.entrySet()) {
                            oprot.writeI32(_iter153.getKey());
                            oprot.writeI32(_iter153.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testStringMap_args implements org.apache.thrift.TBase<testStringMap_args, testStringMap_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testStringMap_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.MAP, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testStringMap_argsStandardSchemeFactory());
        }

        private Map<String, String> thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testStringMap_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testStringMap_args(testStringMap_args other) {
            if (other.isSetThing()) {
                Map<String, String> __this__thing = new LinkedHashMap<String, String>();
                for (Map.Entry<String, String> other_element : other.thing.entrySet()) {

                    String other_element_key = other_element.getKey();
                    String other_element_value = other_element.getValue();

                    String __this__thing_copy_key = other_element_key;

                    String __this__thing_copy_value = other_element_value;

                    __this__thing.put(__this__thing_copy_key, __this__thing_copy_value);
                }
                this.thing = __this__thing;
            }
        }

        public testStringMap_args deepCopy() {
            return new testStringMap_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        public int getThingSize() {
            return (this.thing == null) ? 0 : this.thing.size();
        }

        public void putToThing(String key, String val) {
            if (this.thing == null) {
                this.thing = new LinkedHashMap<String, String>();
            }
            this.thing.put(key, val);
        }

        public Map<String, String> getThing() {
            return this.thing;
        }

        public void setThing(Map<String, String> thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testStringMap_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testStringMap_argsStandardSchemeFactory implements SchemeFactory {

            public testStringMap_argsStandardScheme getScheme() {
                return new testStringMap_argsStandardScheme();
            }
        }

        private static class testStringMap_argsStandardScheme extends StandardScheme<testStringMap_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testStringMap_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map154 = iprot.readMapBegin();
                                    struct.thing = new LinkedHashMap<String, String>(2 * _map154.size);
                                    for (int _i155 = 0; _i155 < _map154.size; ++_i155) {
                                        String _key156; // required
                                        String _val157; // required
                                        _key156 = iprot.readString();
                                        _val157 = iprot.readString();
                                        struct.thing.put(_key156, _val157);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testStringMap_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.thing.size()));
                        for (Map.Entry<String, String> _iter158 : struct.thing.entrySet()) {
                            oprot.writeString(_iter158.getKey());
                            oprot.writeString(_iter158.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testStringMap_result implements org.apache.thrift.TBase<testStringMap_result, testStringMap_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testStringMap_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testStringMap_resultStandardSchemeFactory());
        }

        private Map<String, String> success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testStringMap_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testStringMap_result(testStringMap_result other) {
            if (other.isSetSuccess()) {
                Map<String, String> __this__success = new LinkedHashMap<String, String>();
                for (Map.Entry<String, String> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    String other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    String __this__success_copy_value = other_element_value;

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public testStringMap_result deepCopy() {
            return new testStringMap_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, String val) {
            if (this.success == null) {
                this.success = new LinkedHashMap<String, String>();
            }
            this.success.put(key, val);
        }

        public Map<String, String> getSuccess() {
            return this.success;
        }

        public void setSuccess(Map<String, String> success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testStringMap_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testStringMap_resultStandardSchemeFactory implements SchemeFactory {

            public testStringMap_resultStandardScheme getScheme() {
                return new testStringMap_resultStandardScheme();
            }
        }

        private static class testStringMap_resultStandardScheme extends StandardScheme<testStringMap_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testStringMap_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map159 = iprot.readMapBegin();
                                    struct.success = new LinkedHashMap<String, String>(2 * _map159.size);
                                    for (int _i160 = 0; _i160 < _map159.size; ++_i160) {
                                        String _key161; // required
                                        String _val162; // required
                                        _key161 = iprot.readString();
                                        _val162 = iprot.readString();
                                        struct.success.put(_key161, _val162);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testStringMap_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (Map.Entry<String, String> _iter163 : struct.success.entrySet()) {
                            oprot.writeString(_iter163.getKey());
                            oprot.writeString(_iter163.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testSet_args implements org.apache.thrift.TBase<testSet_args, testSet_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testSet_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.SET, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testSet_argsStandardSchemeFactory());
        }

        private Set<Integer> thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testSet_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testSet_args(testSet_args other) {
            if (other.isSetThing()) {
                Set<Integer> __this__thing = new HashSet<Integer>();
                for (Integer other_element : other.thing) {
                    __this__thing.add(other_element);
                }
                this.thing = __this__thing;
            }
        }

        public testSet_args deepCopy() {
            return new testSet_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        public int getThingSize() {
            return (this.thing == null) ? 0 : this.thing.size();
        }

        public java.util.Iterator<Integer> getThingIterator() {
            return (this.thing == null) ? null : this.thing.iterator();
        }

        public void addToThing(int elem) {
            if (this.thing == null) {
                this.thing = new HashSet<Integer>();
            }
            this.thing.add(elem);
        }

        public Set<Integer> getThing() {
            return this.thing;
        }

        public void setThing(Set<Integer> thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testSet_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testSet_argsStandardSchemeFactory implements SchemeFactory {

            public testSet_argsStandardScheme getScheme() {
                return new testSet_argsStandardScheme();
            }
        }

        private static class testSet_argsStandardScheme extends StandardScheme<testSet_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testSet_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                                {
                                    org.apache.thrift.protocol.TSet _set164 = iprot.readSetBegin();
                                    struct.thing = new HashSet<Integer>(2 * _set164.size);
                                    for (int _i165 = 0; _i165 < _set164.size; ++_i165) {
                                        int _elem166; // required
                                        _elem166 = iprot.readI32();
                                        struct.thing.add(_elem166);
                                    }
                                    iprot.readSetEnd();
                                }
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testSet_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.thing.size()));
                        for (int _iter167 : struct.thing) {
                            oprot.writeI32(_iter167);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testSet_result implements org.apache.thrift.TBase<testSet_result, testSet_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testSet_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testSet_resultStandardSchemeFactory());
        }

        private Set<Integer> success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testSet_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testSet_result(testSet_result other) {
            if (other.isSetSuccess()) {
                Set<Integer> __this__success = new HashSet<Integer>();
                for (Integer other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public testSet_result deepCopy() {
            return new testSet_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Integer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(int elem) {
            if (this.success == null) {
                this.success = new HashSet<Integer>();
            }
            this.success.add(elem);
        }

        public Set<Integer> getSuccess() {
            return this.success;
        }

        public void setSuccess(Set<Integer> success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testSet_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testSet_resultStandardSchemeFactory implements SchemeFactory {

            public testSet_resultStandardScheme getScheme() {
                return new testSet_resultStandardScheme();
            }
        }

        private static class testSet_resultStandardScheme extends StandardScheme<testSet_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testSet_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                                {
                                    org.apache.thrift.protocol.TSet _set168 = iprot.readSetBegin();
                                    struct.success = new HashSet<Integer>(2 * _set168.size);
                                    for (int _i169 = 0; _i169 < _set168.size; ++_i169) {
                                        int _elem170; // required
                                        _elem170 = iprot.readI32();
                                        struct.success.add(_elem170);
                                    }
                                    iprot.readSetEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testSet_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (int _iter171 : struct.success) {
                            oprot.writeI32(_iter171);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testList_args implements org.apache.thrift.TBase<testList_args, testList_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testList_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testList_argsStandardSchemeFactory());
        }

        private List<Integer> thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testList_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testList_args(testList_args other) {
            if (other.isSetThing()) {
                List<Integer> __this__thing = new ArrayList<Integer>();
                for (Integer other_element : other.thing) {
                    __this__thing.add(other_element);
                }
                this.thing = __this__thing;
            }
        }

        public testList_args deepCopy() {
            return new testList_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        public int getThingSize() {
            return (this.thing == null) ? 0 : this.thing.size();
        }

        public java.util.Iterator<Integer> getThingIterator() {
            return (this.thing == null) ? null : this.thing.iterator();
        }

        public void addToThing(int elem) {
            if (this.thing == null) {
                this.thing = new ArrayList<Integer>();
            }
            this.thing.add(elem);
        }

        public List<Integer> getThing() {
            return this.thing;
        }

        public void setThing(List<Integer> thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testList_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testList_argsStandardSchemeFactory implements SchemeFactory {

            public testList_argsStandardScheme getScheme() {
                return new testList_argsStandardScheme();
            }
        }

        private static class testList_argsStandardScheme extends StandardScheme<testList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testList_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                                    struct.thing = new ArrayList<Integer>(_list172.size);
                                    for (int _i173 = 0; _i173 < _list172.size; ++_i173) {
                                        int _elem174; // required
                                        _elem174 = iprot.readI32();
                                        struct.thing.add(_elem174);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testList_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.thing.size()));
                        for (int _iter175 : struct.thing) {
                            oprot.writeI32(_iter175);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testList_result implements org.apache.thrift.TBase<testList_result, testList_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testList_resultStandardSchemeFactory());
        }

        private List<Integer> success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testList_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testList_result(testList_result other) {
            if (other.isSetSuccess()) {
                List<Integer> __this__success = new ArrayList<Integer>();
                for (Integer other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public testList_result deepCopy() {
            return new testList_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Integer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(int elem) {
            if (this.success == null) {
                this.success = new ArrayList<Integer>();
            }
            this.success.add(elem);
        }

        public List<Integer> getSuccess() {
            return this.success;
        }

        public void setSuccess(List<Integer> success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testList_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testList_resultStandardSchemeFactory implements SchemeFactory {

            public testList_resultStandardScheme getScheme() {
                return new testList_resultStandardScheme();
            }
        }

        private static class testList_resultStandardScheme extends StandardScheme<testList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testList_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                                    struct.success = new ArrayList<Integer>(_list176.size);
                                    for (int _i177 = 0; _i177 < _list176.size; ++_i177) {
                                        int _elem178; // required
                                        _elem178 = iprot.readI32();
                                        struct.success.add(_elem178);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testList_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (int _iter179 : struct.success) {
                            oprot.writeI32(_iter179);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testEnum_args implements org.apache.thrift.TBase<testEnum_args, testEnum_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testEnum_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testEnum_argsStandardSchemeFactory());
        }

        private Numberz thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testEnum_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testEnum_args(testEnum_args other) {
            if (other.isSetThing()) {
                this.thing = other.thing;
            }
        }

        public testEnum_args deepCopy() {
            return new testEnum_args(this);
        }

        public void clear() {
            this.thing = null;
        }

        /**
         * @see thrift.test.Numberz
         */
        public Numberz getThing() {
            return this.thing;
        }

        /**
         * @see thrift.test.Numberz
         */
        public void setThing(Numberz thing) {
            this.thing = thing;
        }

        public void unsetThing() {
            this.thing = null;
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return this.thing != null;
        }

        public void setThingIsSet(boolean value) {
            if (!value) {
                this.thing = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testEnum_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testEnum_argsStandardSchemeFactory implements SchemeFactory {

            public testEnum_argsStandardScheme getScheme() {
                return new testEnum_argsStandardScheme();
            }
        }

        private static class testEnum_argsStandardScheme extends StandardScheme<testEnum_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testEnum_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.thing = Numberz.findByValue(iprot.readI32());
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testEnum_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.thing != null) {
                    oprot.writeFieldBegin(THING_FIELD_DESC);
                    oprot.writeI32(struct.thing.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testEnum_result implements org.apache.thrift.TBase<testEnum_result, testEnum_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testEnum_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testEnum_resultStandardSchemeFactory());
        }

        private Numberz success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testEnum_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testEnum_result(testEnum_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public testEnum_result deepCopy() {
            return new testEnum_result(this);
        }

        public void clear() {
            this.success = null;
        }

        /**
         * @see thrift.test.Numberz
         */
        public Numberz getSuccess() {
            return this.success;
        }

        /**
         * @see thrift.test.Numberz
         */
        public void setSuccess(Numberz success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testEnum_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testEnum_resultStandardSchemeFactory implements SchemeFactory {

            public testEnum_resultStandardScheme getScheme() {
                return new testEnum_resultStandardScheme();
            }
        }

        private static class testEnum_resultStandardScheme extends StandardScheme<testEnum_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testEnum_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = Numberz.findByValue(iprot.readI32());
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testEnum_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testTypedef_args implements org.apache.thrift.TBase<testTypedef_args, testTypedef_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testTypedef_args");

        private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.I64, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testTypedef_argsStandardSchemeFactory());
        }

        private long thing; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __THING_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testTypedef_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testTypedef_args(testTypedef_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.thing = other.thing;
        }

        public testTypedef_args deepCopy() {
            return new testTypedef_args(this);
        }

        public void clear() {
            setThingIsSet(false);
            this.thing = 0;
        }

        public long getThing() {
            return this.thing;
        }

        public void setThing(long thing) {
            this.thing = thing;
            setThingIsSet(true);
        }

        public void unsetThing() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THING_ISSET_ID);
        }

        /**
         * Returns true if field thing is set (has been assigned a value) and false otherwise
         */
        public boolean isSetThing() {
            return EncodingUtils.testBit(__isset_bitfield, __THING_ISSET_ID);
        }

        public void setThingIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THING_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testTypedef_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testTypedef_argsStandardSchemeFactory implements SchemeFactory {

            public testTypedef_argsStandardScheme getScheme() {
                return new testTypedef_argsStandardScheme();
            }
        }

        private static class testTypedef_argsStandardScheme extends StandardScheme<testTypedef_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testTypedef_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // THING
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.thing = iprot.readI64();
                                struct.setThingIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testTypedef_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(THING_FIELD_DESC);
                oprot.writeI64(struct.thing);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testTypedef_result implements org.apache.thrift.TBase<testTypedef_result, testTypedef_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testTypedef_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testTypedef_resultStandardSchemeFactory());
        }

        private long success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testTypedef_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testTypedef_result(testTypedef_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public testTypedef_result deepCopy() {
            return new testTypedef_result(this);
        }

        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        public void setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testTypedef_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testTypedef_resultStandardSchemeFactory implements SchemeFactory {

            public testTypedef_resultStandardScheme getScheme() {
                return new testTypedef_resultStandardScheme();
            }
        }

        private static class testTypedef_resultStandardScheme extends StandardScheme<testTypedef_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testTypedef_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testTypedef_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMapMap_args implements org.apache.thrift.TBase<testMapMap_args, testMapMap_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMapMap_args");

        private static final org.apache.thrift.protocol.TField HELLO_FIELD_DESC = new org.apache.thrift.protocol.TField("hello", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMapMap_argsStandardSchemeFactory());
        }

        private int hello; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __HELLO_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testMapMap_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMapMap_args(testMapMap_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hello = other.hello;
        }

        public testMapMap_args deepCopy() {
            return new testMapMap_args(this);
        }

        public void clear() {
            setHelloIsSet(false);
            this.hello = 0;
        }

        public int getHello() {
            return this.hello;
        }

        public void setHello(int hello) {
            this.hello = hello;
            setHelloIsSet(true);
        }

        public void unsetHello() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HELLO_ISSET_ID);
        }

        /**
         * Returns true if field hello is set (has been assigned a value) and false otherwise
         */
        public boolean isSetHello() {
            return EncodingUtils.testBit(__isset_bitfield, __HELLO_ISSET_ID);
        }

        public void setHelloIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HELLO_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMapMap_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMapMap_argsStandardSchemeFactory implements SchemeFactory {

            public testMapMap_argsStandardScheme getScheme() {
                return new testMapMap_argsStandardScheme();
            }
        }

        private static class testMapMap_argsStandardScheme extends StandardScheme<testMapMap_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMapMap_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HELLO
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hello = iprot.readI32();
                                struct.setHelloIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMapMap_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HELLO_FIELD_DESC);
                oprot.writeI32(struct.hello);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMapMap_result implements org.apache.thrift.TBase<testMapMap_result, testMapMap_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMapMap_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMapMap_resultStandardSchemeFactory());
        }

        private Map<Integer, Map<Integer, Integer>> success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testMapMap_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMapMap_result(testMapMap_result other) {
            if (other.isSetSuccess()) {
                Map<Integer, Map<Integer, Integer>> __this__success = new LinkedHashMap<Integer, Map<Integer, Integer>>();
                for (Map.Entry<Integer, Map<Integer, Integer>> other_element : other.success.entrySet()) {

                    Integer other_element_key = other_element.getKey();
                    Map<Integer, Integer> other_element_value = other_element.getValue();

                    Integer __this__success_copy_key = other_element_key;

                    Map<Integer, Integer> __this__success_copy_value = new LinkedHashMap<Integer, Integer>();
                    for (Map.Entry<Integer, Integer> other_element_value_element : other_element_value.entrySet()) {

                        Integer other_element_value_element_key = other_element_value_element.getKey();
                        Integer other_element_value_element_value = other_element_value_element.getValue();

                        Integer __this__success_copy_value_copy_key = other_element_value_element_key;

                        Integer __this__success_copy_value_copy_value = other_element_value_element_value;

                        __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
                    }

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public testMapMap_result deepCopy() {
            return new testMapMap_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(int key, Map<Integer, Integer> val) {
            if (this.success == null) {
                this.success = new LinkedHashMap<Integer, Map<Integer, Integer>>();
            }
            this.success.put(key, val);
        }

        public Map<Integer, Map<Integer, Integer>> getSuccess() {
            return this.success;
        }

        public void setSuccess(Map<Integer, Map<Integer, Integer>> success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMapMap_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMapMap_resultStandardSchemeFactory implements SchemeFactory {

            public testMapMap_resultStandardScheme getScheme() {
                return new testMapMap_resultStandardScheme();
            }
        }

        private static class testMapMap_resultStandardScheme extends StandardScheme<testMapMap_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMapMap_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map180 = iprot.readMapBegin();
                                    struct.success = new LinkedHashMap<Integer, Map<Integer, Integer>>(2 * _map180.size);
                                    for (int _i181 = 0; _i181 < _map180.size; ++_i181) {
                                        int _key182; // required
                                        Map<Integer, Integer> _val183; // required
                                        _key182 = iprot.readI32();
                                        {
                                            org.apache.thrift.protocol.TMap _map184 = iprot.readMapBegin();
                                            _val183 = new LinkedHashMap<Integer, Integer>(2 * _map184.size);
                                            for (int _i185 = 0; _i185 < _map184.size; ++_i185) {
                                                int _key186; // required
                                                int _val187; // required
                                                _key186 = iprot.readI32();
                                                _val187 = iprot.readI32();
                                                _val183.put(_key186, _val187);
                                            }
                                            iprot.readMapEnd();
                                        }
                                        struct.success.put(_key182, _val183);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMapMap_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
                        for (Map.Entry<Integer, Map<Integer, Integer>> _iter188 : struct.success.entrySet()) {
                            oprot.writeI32(_iter188.getKey());
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, _iter188.getValue().size()));
                                for (Map.Entry<Integer, Integer> _iter189 : _iter188.getValue().entrySet()) {
                                    oprot.writeI32(_iter189.getKey());
                                    oprot.writeI32(_iter189.getValue());
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testInsanity_args implements org.apache.thrift.TBase<testInsanity_args, testInsanity_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testInsanity_args");

        private static final org.apache.thrift.protocol.TField ARGUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("argument", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testInsanity_argsStandardSchemeFactory());
        }

        private Insanity argument; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testInsanity_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testInsanity_args(testInsanity_args other) {
            if (other.isSetArgument()) {
                this.argument = new Insanity(other.argument);
            }
        }

        public testInsanity_args deepCopy() {
            return new testInsanity_args(this);
        }

        public void clear() {
            this.argument = null;
        }

        public Insanity getArgument() {
            return this.argument;
        }

        public void setArgument(Insanity argument) {
            this.argument = argument;
        }

        public void unsetArgument() {
            this.argument = null;
        }

        /**
         * Returns true if field argument is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArgument() {
            return this.argument != null;
        }

        public void setArgumentIsSet(boolean value) {
            if (!value) {
                this.argument = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testInsanity_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (argument != null) {
                argument.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testInsanity_argsStandardSchemeFactory implements SchemeFactory {

            public testInsanity_argsStandardScheme getScheme() {
                return new testInsanity_argsStandardScheme();
            }
        }

        private static class testInsanity_argsStandardScheme extends StandardScheme<testInsanity_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testInsanity_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARGUMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.argument = new Insanity();
                                struct.argument.read(iprot);
                                struct.setArgumentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testInsanity_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.argument != null) {
                    oprot.writeFieldBegin(ARGUMENT_FIELD_DESC);
                    struct.argument.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testInsanity_result implements org.apache.thrift.TBase<testInsanity_result, testInsanity_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testInsanity_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testInsanity_resultStandardSchemeFactory());
        }

        private Map<Long, Map<Numberz, Insanity>> success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testInsanity_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testInsanity_result(testInsanity_result other) {
            if (other.isSetSuccess()) {
                Map<Long, Map<Numberz, Insanity>> __this__success = new LinkedHashMap<Long, Map<Numberz, Insanity>>();
                for (Map.Entry<Long, Map<Numberz, Insanity>> other_element : other.success.entrySet()) {

                    Long other_element_key = other_element.getKey();
                    Map<Numberz, Insanity> other_element_value = other_element.getValue();

                    Long __this__success_copy_key = other_element_key;

                    Map<Numberz, Insanity> __this__success_copy_value = new LinkedHashMap<Numberz, Insanity>();
                    for (Map.Entry<Numberz, Insanity> other_element_value_element : other_element_value.entrySet()) {

                        Numberz other_element_value_element_key = other_element_value_element.getKey();
                        Insanity other_element_value_element_value = other_element_value_element.getValue();

                        Numberz __this__success_copy_value_copy_key = other_element_value_element_key;

                        Insanity __this__success_copy_value_copy_value = new Insanity(other_element_value_element_value);

                        __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
                    }

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public testInsanity_result deepCopy() {
            return new testInsanity_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(long key, Map<Numberz, Insanity> val) {
            if (this.success == null) {
                this.success = new LinkedHashMap<Long, Map<Numberz, Insanity>>();
            }
            this.success.put(key, val);
        }

        public Map<Long, Map<Numberz, Insanity>> getSuccess() {
            return this.success;
        }

        public void setSuccess(Map<Long, Map<Numberz, Insanity>> success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testInsanity_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testInsanity_resultStandardSchemeFactory implements SchemeFactory {

            public testInsanity_resultStandardScheme getScheme() {
                return new testInsanity_resultStandardScheme();
            }
        }

        private static class testInsanity_resultStandardScheme extends StandardScheme<testInsanity_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testInsanity_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map190 = iprot.readMapBegin();
                                    struct.success = new LinkedHashMap<Long, Map<Numberz, Insanity>>(2 * _map190.size);
                                    for (int _i191 = 0; _i191 < _map190.size; ++_i191) {
                                        long _key192; // required
                                        Map<Numberz, Insanity> _val193; // required
                                        _key192 = iprot.readI64();
                                        {
                                            org.apache.thrift.protocol.TMap _map194 = iprot.readMapBegin();
                                            _val193 = new LinkedHashMap<Numberz, Insanity>(2 * _map194.size);
                                            for (int _i195 = 0; _i195 < _map194.size; ++_i195) {
                                                Numberz _key196; // required
                                                Insanity _val197; // required
                                                _key196 = Numberz.findByValue(iprot.readI32());
                                                _val197 = new Insanity();
                                                _val197.read(iprot);
                                                _val193.put(_key196, _val197);
                                            }
                                            iprot.readMapEnd();
                                        }
                                        struct.success.put(_key192, _val193);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testInsanity_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
                        for (Map.Entry<Long, Map<Numberz, Insanity>> _iter198 : struct.success.entrySet()) {
                            oprot.writeI64(_iter198.getKey());
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, _iter198.getValue().size()));
                                for (Map.Entry<Numberz, Insanity> _iter199 : _iter198.getValue().entrySet()) {
                                    oprot.writeI32(_iter199.getKey().getValue());
                                    _iter199.getValue().write(oprot);
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMulti_args implements org.apache.thrift.TBase<testMulti_args, testMulti_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMulti_args");

        private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.BYTE, (short) 1);
        private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.I64, (short) 3);
        private static final org.apache.thrift.protocol.TField ARG3_FIELD_DESC = new org.apache.thrift.protocol.TField("arg3", org.apache.thrift.protocol.TType.MAP, (short) 4);
        private static final org.apache.thrift.protocol.TField ARG4_FIELD_DESC = new org.apache.thrift.protocol.TField("arg4", org.apache.thrift.protocol.TType.I32, (short) 5);
        private static final org.apache.thrift.protocol.TField ARG5_FIELD_DESC = new org.apache.thrift.protocol.TField("arg5", org.apache.thrift.protocol.TType.I64, (short) 6);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMulti_argsStandardSchemeFactory());
        }

        private byte arg0; // required
        private int arg1; // required
        private long arg2; // required
        private Map<Short, String> arg3; // required
        private Numberz arg4; // required
        private long arg5; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __ARG0_ISSET_ID = 0;
        private static final int __ARG1_ISSET_ID = 1;
        private static final int __ARG2_ISSET_ID = 2;
        private static final int __ARG5_ISSET_ID = 3;
        private byte __isset_bitfield = 0;

        public testMulti_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMulti_args(testMulti_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.arg0 = other.arg0;
            this.arg1 = other.arg1;
            this.arg2 = other.arg2;
            if (other.isSetArg3()) {
                Map<Short, String> __this__arg3 = new LinkedHashMap<Short, String>();
                for (Map.Entry<Short, String> other_element : other.arg3.entrySet()) {

                    Short other_element_key = other_element.getKey();
                    String other_element_value = other_element.getValue();

                    Short __this__arg3_copy_key = other_element_key;

                    String __this__arg3_copy_value = other_element_value;

                    __this__arg3.put(__this__arg3_copy_key, __this__arg3_copy_value);
                }
                this.arg3 = __this__arg3;
            }
            if (other.isSetArg4()) {
                this.arg4 = other.arg4;
            }
            this.arg5 = other.arg5;
        }

        public testMulti_args deepCopy() {
            return new testMulti_args(this);
        }

        public void clear() {
            setArg0IsSet(false);
            this.arg0 = 0;
            setArg1IsSet(false);
            this.arg1 = 0;
            setArg2IsSet(false);
            this.arg2 = 0;
            this.arg3 = null;
            this.arg4 = null;
            setArg5IsSet(false);
            this.arg5 = 0;
        }

        public byte getArg0() {
            return this.arg0;
        }

        public void setArg0(byte arg0) {
            this.arg0 = arg0;
            setArg0IsSet(true);
        }

        public void unsetArg0() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG0_ISSET_ID);
        }

        /**
         * Returns true if field arg0 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg0() {
            return EncodingUtils.testBit(__isset_bitfield, __ARG0_ISSET_ID);
        }

        public void setArg0IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG0_ISSET_ID, value);
        }

        public int getArg1() {
            return this.arg1;
        }

        public void setArg1(int arg1) {
            this.arg1 = arg1;
            setArg1IsSet(true);
        }

        public void unsetArg1() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG1_ISSET_ID);
        }

        /**
         * Returns true if field arg1 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg1() {
            return EncodingUtils.testBit(__isset_bitfield, __ARG1_ISSET_ID);
        }

        public void setArg1IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG1_ISSET_ID, value);
        }

        public long getArg2() {
            return this.arg2;
        }

        public void setArg2(long arg2) {
            this.arg2 = arg2;
            setArg2IsSet(true);
        }

        public void unsetArg2() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG2_ISSET_ID);
        }

        /**
         * Returns true if field arg2 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg2() {
            return EncodingUtils.testBit(__isset_bitfield, __ARG2_ISSET_ID);
        }

        public void setArg2IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG2_ISSET_ID, value);
        }

        public int getArg3Size() {
            return (this.arg3 == null) ? 0 : this.arg3.size();
        }

        public void putToArg3(short key, String val) {
            if (this.arg3 == null) {
                this.arg3 = new LinkedHashMap<Short, String>();
            }
            this.arg3.put(key, val);
        }

        public Map<Short, String> getArg3() {
            return this.arg3;
        }

        public void setArg3(Map<Short, String> arg3) {
            this.arg3 = arg3;
        }

        public void unsetArg3() {
            this.arg3 = null;
        }

        /**
         * Returns true if field arg3 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg3() {
            return this.arg3 != null;
        }

        public void setArg3IsSet(boolean value) {
            if (!value) {
                this.arg3 = null;
            }
        }

        /**
         * @see thrift.test.Numberz
         */
        public Numberz getArg4() {
            return this.arg4;
        }

        /**
         * @see thrift.test.Numberz
         */
        public void setArg4(Numberz arg4) {
            this.arg4 = arg4;
        }

        public void unsetArg4() {
            this.arg4 = null;
        }

        /**
         * Returns true if field arg4 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg4() {
            return this.arg4 != null;
        }

        public void setArg4IsSet(boolean value) {
            if (!value) {
                this.arg4 = null;
            }
        }

        public long getArg5() {
            return this.arg5;
        }

        public void setArg5(long arg5) {
            this.arg5 = arg5;
            setArg5IsSet(true);
        }

        public void unsetArg5() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG5_ISSET_ID);
        }

        /**
         * Returns true if field arg5 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg5() {
            return EncodingUtils.testBit(__isset_bitfield, __ARG5_ISSET_ID);
        }

        public void setArg5IsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG5_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMulti_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMulti_argsStandardSchemeFactory implements SchemeFactory {

            public testMulti_argsStandardScheme getScheme() {
                return new testMulti_argsStandardScheme();
            }
        }

        private static class testMulti_argsStandardScheme extends StandardScheme<testMulti_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMulti_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARG0
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.arg0 = iprot.readByte();
                                struct.setArg0IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ARG1
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.arg1 = iprot.readI32();
                                struct.setArg1IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // ARG2
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.arg2 = iprot.readI64();
                                struct.setArg2IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // ARG3
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map200 = iprot.readMapBegin();
                                    struct.arg3 = new LinkedHashMap<Short, String>(2 * _map200.size);
                                    for (int _i201 = 0; _i201 < _map200.size; ++_i201) {
                                        short _key202; // required
                                        String _val203; // required
                                        _key202 = iprot.readI16();
                                        _val203 = iprot.readString();
                                        struct.arg3.put(_key202, _val203);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setArg3IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // ARG4
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.arg4 = Numberz.findByValue(iprot.readI32());
                                struct.setArg4IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // ARG5
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.arg5 = iprot.readI64();
                                struct.setArg5IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMulti_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ARG0_FIELD_DESC);
                oprot.writeByte(struct.arg0);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ARG1_FIELD_DESC);
                oprot.writeI32(struct.arg1);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ARG2_FIELD_DESC);
                oprot.writeI64(struct.arg2);
                oprot.writeFieldEnd();
                if (struct.arg3 != null) {
                    oprot.writeFieldBegin(ARG3_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.STRING, struct.arg3.size()));
                        for (Map.Entry<Short, String> _iter204 : struct.arg3.entrySet()) {
                            oprot.writeI16(_iter204.getKey());
                            oprot.writeString(_iter204.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.arg4 != null) {
                    oprot.writeFieldBegin(ARG4_FIELD_DESC);
                    oprot.writeI32(struct.arg4.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ARG5_FIELD_DESC);
                oprot.writeI64(struct.arg5);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMulti_result implements org.apache.thrift.TBase<testMulti_result, testMulti_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMulti_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMulti_resultStandardSchemeFactory());
        }

        private Xtruct success; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testMulti_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMulti_result(testMulti_result other) {
            if (other.isSetSuccess()) {
                this.success = new Xtruct(other.success);
            }
        }

        public testMulti_result deepCopy() {
            return new testMulti_result(this);
        }

        public void clear() {
            this.success = null;
        }

        public Xtruct getSuccess() {
            return this.success;
        }

        public void setSuccess(Xtruct success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMulti_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMulti_resultStandardSchemeFactory implements SchemeFactory {

            public testMulti_resultStandardScheme getScheme() {
                return new testMulti_resultStandardScheme();
            }
        }

        private static class testMulti_resultStandardScheme extends StandardScheme<testMulti_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMulti_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new Xtruct();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMulti_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testException_args implements org.apache.thrift.TBase<testException_args, testException_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testException_args");

        private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testException_argsStandardSchemeFactory());
        }

        private String arg; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testException_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testException_args(testException_args other) {
            if (other.isSetArg()) {
                this.arg = other.arg;
            }
        }

        public testException_args deepCopy() {
            return new testException_args(this);
        }

        public void clear() {
            this.arg = null;
        }

        public String getArg() {
            return this.arg;
        }

        public void setArg(String arg) {
            this.arg = arg;
        }

        public void unsetArg() {
            this.arg = null;
        }

        /**
         * Returns true if field arg is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg() {
            return this.arg != null;
        }

        public void setArgIsSet(boolean value) {
            if (!value) {
                this.arg = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testException_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testException_argsStandardSchemeFactory implements SchemeFactory {

            public testException_argsStandardScheme getScheme() {
                return new testException_argsStandardScheme();
            }
        }

        private static class testException_argsStandardScheme extends StandardScheme<testException_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testException_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.arg = iprot.readString();
                                struct.setArgIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testException_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.arg != null) {
                    oprot.writeFieldBegin(ARG_FIELD_DESC);
                    oprot.writeString(struct.arg);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testException_result implements org.apache.thrift.TBase<testException_result, testException_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testException_result");

        private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testException_resultStandardSchemeFactory());
        }

        private Xception err1; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testException_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testException_result(testException_result other) {
            if (other.isSetErr1()) {
                this.err1 = new Xception(other.err1);
            }
        }

        public testException_result deepCopy() {
            return new testException_result(this);
        }

        public void clear() {
            this.err1 = null;
        }

        public Xception getErr1() {
            return this.err1;
        }

        public void setErr1(Xception err1) {
            this.err1 = err1;
        }

        public void unsetErr1() {
            this.err1 = null;
        }

        /**
         * Returns true if field err1 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetErr1() {
            return this.err1 != null;
        }

        public void setErr1IsSet(boolean value) {
            if (!value) {
                this.err1 = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testException_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testException_resultStandardSchemeFactory implements SchemeFactory {

            public testException_resultStandardScheme getScheme() {
                return new testException_resultStandardScheme();
            }
        }

        private static class testException_resultStandardScheme extends StandardScheme<testException_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testException_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ERR1
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.err1 = new Xception();
                                struct.err1.read(iprot);
                                struct.setErr1IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testException_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.err1 != null) {
                    oprot.writeFieldBegin(ERR1_FIELD_DESC);
                    struct.err1.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMultiException_args implements org.apache.thrift.TBase<testMultiException_args, testMultiException_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMultiException_args");

        private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMultiException_argsStandardSchemeFactory());
        }

        private String arg0; // required
        private String arg1; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testMultiException_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMultiException_args(testMultiException_args other) {
            if (other.isSetArg0()) {
                this.arg0 = other.arg0;
            }
            if (other.isSetArg1()) {
                this.arg1 = other.arg1;
            }
        }

        public testMultiException_args deepCopy() {
            return new testMultiException_args(this);
        }

        public void clear() {
            this.arg0 = null;
            this.arg1 = null;
        }

        public String getArg0() {
            return this.arg0;
        }

        public void setArg0(String arg0) {
            this.arg0 = arg0;
        }

        public void unsetArg0() {
            this.arg0 = null;
        }

        /**
         * Returns true if field arg0 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg0() {
            return this.arg0 != null;
        }

        public void setArg0IsSet(boolean value) {
            if (!value) {
                this.arg0 = null;
            }
        }

        public String getArg1() {
            return this.arg1;
        }

        public void setArg1(String arg1) {
            this.arg1 = arg1;
        }

        public void unsetArg1() {
            this.arg1 = null;
        }

        /**
         * Returns true if field arg1 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg1() {
            return this.arg1 != null;
        }

        public void setArg1IsSet(boolean value) {
            if (!value) {
                this.arg1 = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMultiException_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMultiException_argsStandardSchemeFactory implements SchemeFactory {

            public testMultiException_argsStandardScheme getScheme() {
                return new testMultiException_argsStandardScheme();
            }
        }

        private static class testMultiException_argsStandardScheme extends StandardScheme<testMultiException_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMultiException_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARG0
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.arg0 = iprot.readString();
                                struct.setArg0IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ARG1
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.arg1 = iprot.readString();
                                struct.setArg1IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMultiException_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.arg0 != null) {
                    oprot.writeFieldBegin(ARG0_FIELD_DESC);
                    oprot.writeString(struct.arg0);
                    oprot.writeFieldEnd();
                }
                if (struct.arg1 != null) {
                    oprot.writeFieldBegin(ARG1_FIELD_DESC);
                    oprot.writeString(struct.arg1);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testMultiException_result implements org.apache.thrift.TBase<testMultiException_result, testMultiException_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMultiException_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testMultiException_resultStandardSchemeFactory());
        }

        private Xtruct success; // required
        private Xception err1; // required
        private Xception2 err2; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        public testMultiException_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testMultiException_result(testMultiException_result other) {
            if (other.isSetSuccess()) {
                this.success = new Xtruct(other.success);
            }
            if (other.isSetErr1()) {
                this.err1 = new Xception(other.err1);
            }
            if (other.isSetErr2()) {
                this.err2 = new Xception2(other.err2);
            }
        }

        public testMultiException_result deepCopy() {
            return new testMultiException_result(this);
        }

        public void clear() {
            this.success = null;
            this.err1 = null;
            this.err2 = null;
        }

        public Xtruct getSuccess() {
            return this.success;
        }

        public void setSuccess(Xtruct success) {
            this.success = success;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public Xception getErr1() {
            return this.err1;
        }

        public void setErr1(Xception err1) {
            this.err1 = err1;
        }

        public void unsetErr1() {
            this.err1 = null;
        }

        /**
         * Returns true if field err1 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetErr1() {
            return this.err1 != null;
        }

        public void setErr1IsSet(boolean value) {
            if (!value) {
                this.err1 = null;
            }
        }

        public Xception2 getErr2() {
            return this.err2;
        }

        public void setErr2(Xception2 err2) {
            this.err2 = err2;
        }

        public void unsetErr2() {
            this.err2 = null;
        }

        /**
         * Returns true if field err2 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetErr2() {
            return this.err2 != null;
        }

        public void setErr2IsSet(boolean value) {
            if (!value) {
                this.err2 = null;
            }
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testMultiException_result other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testMultiException_resultStandardSchemeFactory implements SchemeFactory {

            public testMultiException_resultStandardScheme getScheme() {
                return new testMultiException_resultStandardScheme();
            }
        }

        private static class testMultiException_resultStandardScheme extends StandardScheme<testMultiException_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testMultiException_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new Xtruct();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // ERR1
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.err1 = new Xception();
                                struct.err1.read(iprot);
                                struct.setErr1IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ERR2
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.err2 = new Xception2();
                                struct.err2.read(iprot);
                                struct.setErr2IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testMultiException_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.err1 != null) {
                    oprot.writeFieldBegin(ERR1_FIELD_DESC);
                    struct.err1.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.err2 != null) {
                    oprot.writeFieldBegin(ERR2_FIELD_DESC);
                    struct.err2.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

    public static class testOneway_args implements org.apache.thrift.TBase<testOneway_args, testOneway_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testOneway_args");

        private static final org.apache.thrift.protocol.TField SECONDS_TO_SLEEP_FIELD_DESC = new org.apache.thrift.protocol.TField("secondsToSleep", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new testOneway_argsStandardSchemeFactory());
        }

        private int secondsToSleep; // required

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            @Override
            public short getThriftFieldId() {
                return 0;
            }

            @Override
            public String getFieldName() {
                return null;
            }
        }

        // isset id assignments
        private static final int __SECONDSTOSLEEP_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        public testOneway_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testOneway_args(testOneway_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.secondsToSleep = other.secondsToSleep;
        }

        public testOneway_args deepCopy() {
            return new testOneway_args(this);
        }

        public void clear() {
            setSecondsToSleepIsSet(false);
            this.secondsToSleep = 0;
        }

        public int getSecondsToSleep() {
            return this.secondsToSleep;
        }

        public void setSecondsToSleep(int secondsToSleep) {
            this.secondsToSleep = secondsToSleep;
            setSecondsToSleepIsSet(true);
        }

        public void unsetSecondsToSleep() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECONDSTOSLEEP_ISSET_ID);
        }

        /**
         * Returns true if field secondsToSleep is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSecondsToSleep() {
            return EncodingUtils.testBit(__isset_bitfield, __SECONDSTOSLEEP_ISSET_ID);
        }

        public void setSecondsToSleepIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECONDSTOSLEEP_ISSET_ID, value);
        }

        @Override
        public boolean isSet(_Fields field) {
            return false;
        }

        @Override
        public Object getFieldValue(_Fields field) {
            return null;
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return null;
        }

        public int compareTo(testOneway_args other) {
            return 0;
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te.getMessage());
            }
        }

        private static class testOneway_argsStandardSchemeFactory implements SchemeFactory {

            public testOneway_argsStandardScheme getScheme() {
                return new testOneway_argsStandardScheme();
            }
        }

        private static class testOneway_argsStandardScheme extends StandardScheme<testOneway_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, testOneway_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SECONDS_TO_SLEEP
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.secondsToSleep = iprot.readI32();
                                struct.setSecondsToSleepIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testOneway_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SECONDS_TO_SLEEP_FIELD_DESC);
                oprot.writeI32(struct.secondsToSleep);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

    }

}
