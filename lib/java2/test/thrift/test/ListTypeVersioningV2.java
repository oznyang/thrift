/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ListTypeVersioningV2 implements org.apache.thrift.TBase<ListTypeVersioningV2, ListTypeVersioningV2._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListTypeVersioningV2");

    private static final org.apache.thrift.protocol.TField STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("strings", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final org.apache.thrift.protocol.TField HELLO_FIELD_DESC = new org.apache.thrift.protocol.TField("hello", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new ListTypeVersioningV2StandardSchemeFactory());
    }

    private List<String> strings; // required
    private String hello; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public ListTypeVersioningV2() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ListTypeVersioningV2(ListTypeVersioningV2 other) {
        if (other.isSetStrings()) {
            List<String> __this__strings = new ArrayList<String>();
            for (String other_element : other.strings) {
                __this__strings.add(other_element);
            }
            this.strings = __this__strings;
        }
        if (other.isSetHello()) {
            this.hello = other.hello;
        }
    }

    public ListTypeVersioningV2 deepCopy() {
        return new ListTypeVersioningV2(this);
    }

    public void clear() {
        this.strings = null;
        this.hello = null;
    }

    public int getStringsSize() {
        return (this.strings == null) ? 0 : this.strings.size();
    }

    public java.util.Iterator<String> getStringsIterator() {
        return (this.strings == null) ? null : this.strings.iterator();
    }

    public void addToStrings(String elem) {
        if (this.strings == null) {
            this.strings = new ArrayList<String>();
        }
        this.strings.add(elem);
    }

    public List<String> getStrings() {
        return this.strings;
    }

    public void setStrings(List<String> strings) {
        this.strings = strings;
    }

    public void unsetStrings() {
        this.strings = null;
    }

    /**
     * Returns true if field strings is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStrings() {
        return this.strings != null;
    }

    public void setStringsIsSet(boolean value) {
        if (!value) {
            this.strings = null;
        }
    }

    public String getHello() {
        return this.hello;
    }

    public void setHello(String hello) {
        this.hello = hello;
    }

    public void unsetHello() {
        this.hello = null;
    }

    /**
     * Returns true if field hello is set (has been assigned a value) and false otherwise
     */
    public boolean isSetHello() {
        return this.hello != null;
    }

    public void setHelloIsSet(boolean value) {
        if (!value) {
            this.hello = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(ListTypeVersioningV2 other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class ListTypeVersioningV2StandardSchemeFactory implements SchemeFactory {

        public ListTypeVersioningV2StandardScheme getScheme() {
            return new ListTypeVersioningV2StandardScheme();
        }
    }

    private static class ListTypeVersioningV2StandardScheme extends StandardScheme<ListTypeVersioningV2> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ListTypeVersioningV2 struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // STRINGS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                                struct.strings = new ArrayList<String>(_list61.size);
                                for (int _i62 = 0; _i62 < _list61.size; ++_i62) {
                                    String _elem63; // required
                                    _elem63 = iprot.readString();
                                    struct.strings.add(_elem63);
                                }
                                iprot.readListEnd();
                            }
                            struct.setStringsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // HELLO
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.hello = iprot.readString();
                            struct.setHelloIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ListTypeVersioningV2 struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.strings != null) {
                oprot.writeFieldBegin(STRINGS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.strings.size()));
                    for (String _iter64 : struct.strings) {
                        oprot.writeString(_iter64);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.hello != null) {
                oprot.writeFieldBegin(HELLO_FIELD_DESC);
                oprot.writeString(struct.hello);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

