/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.nio.ByteBuffer;
import java.util.*;

public class CrazyNesting implements org.apache.thrift.TBase<CrazyNesting, CrazyNesting._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrazyNesting");

    private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("string_field", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField SET_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("set_field", org.apache.thrift.protocol.TType.SET, (short) 2);
    private static final org.apache.thrift.protocol.TField LIST_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("list_field", org.apache.thrift.protocol.TType.LIST, (short) 3);
    private static final org.apache.thrift.protocol.TField BINARY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_field", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new CrazyNestingStandardSchemeFactory());
    }

    private String string_field; // required
    private Set<Insanity> set_field; // optional
    private List<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>> list_field; // required
    private ByteBuffer binary_field; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public CrazyNesting() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CrazyNesting(CrazyNesting other) {
        if (other.isSetString_field()) {
            this.string_field = other.string_field;
        }
        if (other.isSetSet_field()) {
            Set<Insanity> __this__set_field = new HashSet<Insanity>();
            for (Insanity other_element : other.set_field) {
                __this__set_field.add(new Insanity(other_element));
            }
            this.set_field = __this__set_field;
        }
        if (other.isSetList_field()) {
            List<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>> __this__list_field = new ArrayList<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>>();
            for (Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>> other_element : other.list_field) {
                Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>> __this__list_field_copy = new LinkedHashMap<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>();
                for (Map.Entry<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>> other_element_element : other_element.entrySet()) {

                    Set<Integer> other_element_element_key = other_element_element.getKey();
                    Map<Integer, Set<List<Map<Insanity, String>>>> other_element_element_value = other_element_element.getValue();

                    Set<Integer> __this__list_field_copy_copy_key = new HashSet<Integer>();
                    for (Integer other_element_element_key_element : other_element_element_key) {
                        __this__list_field_copy_copy_key.add(other_element_element_key_element);
                    }

                    Map<Integer, Set<List<Map<Insanity, String>>>> __this__list_field_copy_copy_value = new LinkedHashMap<Integer, Set<List<Map<Insanity, String>>>>();
                    for (Map.Entry<Integer, Set<List<Map<Insanity, String>>>> other_element_element_value_element : other_element_element_value.entrySet()) {

                        Integer other_element_element_value_element_key = other_element_element_value_element.getKey();
                        Set<List<Map<Insanity, String>>> other_element_element_value_element_value = other_element_element_value_element.getValue();

                        Integer __this__list_field_copy_copy_value_copy_key = other_element_element_value_element_key;

                        Set<List<Map<Insanity, String>>> __this__list_field_copy_copy_value_copy_value = new HashSet<List<Map<Insanity, String>>>();
                        for (List<Map<Insanity, String>> other_element_element_value_element_value_element : other_element_element_value_element_value) {
                            List<Map<Insanity, String>> __this__list_field_copy_copy_value_copy_value_copy = new ArrayList<Map<Insanity, String>>();
                            for (Map<Insanity, String> other_element_element_value_element_value_element_element : other_element_element_value_element_value_element) {
                                Map<Insanity, String> __this__list_field_copy_copy_value_copy_value_copy_copy = new LinkedHashMap<Insanity, String>();
                                for (Map.Entry<Insanity, String> other_element_element_value_element_value_element_element_element : other_element_element_value_element_value_element_element.entrySet()) {

                                    Insanity other_element_element_value_element_value_element_element_element_key = other_element_element_value_element_value_element_element_element.getKey();
                                    String other_element_element_value_element_value_element_element_element_value = other_element_element_value_element_value_element_element_element.getValue();

                                    Insanity __this__list_field_copy_copy_value_copy_value_copy_copy_copy_key = new Insanity(other_element_element_value_element_value_element_element_element_key);

                                    String __this__list_field_copy_copy_value_copy_value_copy_copy_copy_value = other_element_element_value_element_value_element_element_element_value;

                                    __this__list_field_copy_copy_value_copy_value_copy_copy.put(__this__list_field_copy_copy_value_copy_value_copy_copy_copy_key, __this__list_field_copy_copy_value_copy_value_copy_copy_copy_value);
                                }
                                __this__list_field_copy_copy_value_copy_value_copy.add(__this__list_field_copy_copy_value_copy_value_copy_copy);
                            }
                            __this__list_field_copy_copy_value_copy_value.add(__this__list_field_copy_copy_value_copy_value_copy);
                        }

                        __this__list_field_copy_copy_value.put(__this__list_field_copy_copy_value_copy_key, __this__list_field_copy_copy_value_copy_value);
                    }

                    __this__list_field_copy.put(__this__list_field_copy_copy_key, __this__list_field_copy_copy_value);
                }
                __this__list_field.add(__this__list_field_copy);
            }
            this.list_field = __this__list_field;
        }
        if (other.isSetBinary_field()) {
            this.binary_field = org.apache.thrift.TBaseHelper.copyBinary(other.binary_field)
            ;
        }
    }

    public CrazyNesting deepCopy() {
        return new CrazyNesting(this);
    }

    public void clear() {
        this.string_field = null;
        this.set_field = null;
        this.list_field = null;
        this.binary_field = null;
    }

    public String getString_field() {
        return this.string_field;
    }

    public void setString_field(String string_field) {
        this.string_field = string_field;
    }

    public void unsetString_field() {
        this.string_field = null;
    }

    /**
     * Returns true if field string_field is set (has been assigned a value) and false otherwise
     */
    public boolean isSetString_field() {
        return this.string_field != null;
    }

    public void setString_fieldIsSet(boolean value) {
        if (!value) {
            this.string_field = null;
        }
    }

    public int getSet_fieldSize() {
        return (this.set_field == null) ? 0 : this.set_field.size();
    }

    public java.util.Iterator<Insanity> getSet_fieldIterator() {
        return (this.set_field == null) ? null : this.set_field.iterator();
    }

    public void addToSet_field(Insanity elem) {
        if (this.set_field == null) {
            this.set_field = new HashSet<Insanity>();
        }
        this.set_field.add(elem);
    }

    public Set<Insanity> getSet_field() {
        return this.set_field;
    }

    public void setSet_field(Set<Insanity> set_field) {
        this.set_field = set_field;
    }

    public void unsetSet_field() {
        this.set_field = null;
    }

    /**
     * Returns true if field set_field is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSet_field() {
        return this.set_field != null;
    }

    public void setSet_fieldIsSet(boolean value) {
        if (!value) {
            this.set_field = null;
        }
    }

    public int getList_fieldSize() {
        return (this.list_field == null) ? 0 : this.list_field.size();
    }

    public java.util.Iterator<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>> getList_fieldIterator() {
        return (this.list_field == null) ? null : this.list_field.iterator();
    }

    public void addToList_field(Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>> elem) {
        if (this.list_field == null) {
            this.list_field = new ArrayList<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>>();
        }
        this.list_field.add(elem);
    }

    public List<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>> getList_field() {
        return this.list_field;
    }

    public void setList_field(List<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>> list_field) {
        this.list_field = list_field;
    }

    public void unsetList_field() {
        this.list_field = null;
    }

    /**
     * Returns true if field list_field is set (has been assigned a value) and false otherwise
     */
    public boolean isSetList_field() {
        return this.list_field != null;
    }

    public void setList_fieldIsSet(boolean value) {
        if (!value) {
            this.list_field = null;
        }
    }

    public byte[] getBinary_field() {
        setBinary_field(org.apache.thrift.TBaseHelper.rightSize(binary_field));
        return binary_field == null ? null : binary_field.array();
    }

    public ByteBuffer bufferForBinary_field() {
        return binary_field;
    }

    public void setBinary_field(byte[] binary_field) {
        setBinary_field(binary_field == null ? (ByteBuffer) null : ByteBuffer.wrap(binary_field));
    }

    public void setBinary_field(ByteBuffer binary_field) {
        this.binary_field = binary_field;
    }

    public void unsetBinary_field() {
        this.binary_field = null;
    }

    /**
     * Returns true if field binary_field is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBinary_field() {
        return this.binary_field != null;
    }

    public void setBinary_fieldIsSet(boolean value) {
        if (!value) {
            this.binary_field = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(CrazyNesting other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        if (!isSetList_field()) {
            throw new TProtocolException("Required field 'list_field' is unset! Struct:" + toString());
        }

        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class CrazyNestingStandardSchemeFactory implements SchemeFactory {

        public CrazyNestingStandardScheme getScheme() {
            return new CrazyNestingStandardScheme();
        }
    }

    private static class CrazyNestingStandardScheme extends StandardScheme<CrazyNesting> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, CrazyNesting struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // STRING_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.string_field = iprot.readString();
                            struct.setString_fieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SET_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                                struct.set_field = new HashSet<Insanity>(2 * _set9.size);
                                for (int _i10 = 0; _i10 < _set9.size; ++_i10) {
                                    Insanity _elem11; // required
                                    _elem11 = new Insanity();
                                    _elem11.read(iprot);
                                    struct.set_field.add(_elem11);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setSet_fieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // LIST_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                                struct.list_field = new ArrayList<Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>>(_list12.size);
                                for (int _i13 = 0; _i13 < _list12.size; ++_i13) {
                                    Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>> _elem14; // required
                                    {
                                        org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                                        _elem14 = new LinkedHashMap<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>>(2 * _map15.size);
                                        for (int _i16 = 0; _i16 < _map15.size; ++_i16) {
                                            Set<Integer> _key17; // required
                                            Map<Integer, Set<List<Map<Insanity, String>>>> _val18; // required
                                            {
                                                org.apache.thrift.protocol.TSet _set19 = iprot.readSetBegin();
                                                _key17 = new HashSet<Integer>(2 * _set19.size);
                                                for (int _i20 = 0; _i20 < _set19.size; ++_i20) {
                                                    int _elem21; // required
                                                    _elem21 = iprot.readI32();
                                                    _key17.add(_elem21);
                                                }
                                                iprot.readSetEnd();
                                            }
                                            {
                                                org.apache.thrift.protocol.TMap _map22 = iprot.readMapBegin();
                                                _val18 = new LinkedHashMap<Integer, Set<List<Map<Insanity, String>>>>(2 * _map22.size);
                                                for (int _i23 = 0; _i23 < _map22.size; ++_i23) {
                                                    int _key24; // required
                                                    Set<List<Map<Insanity, String>>> _val25; // required
                                                    _key24 = iprot.readI32();
                                                    {
                                                        org.apache.thrift.protocol.TSet _set26 = iprot.readSetBegin();
                                                        _val25 = new HashSet<List<Map<Insanity, String>>>(2 * _set26.size);
                                                        for (int _i27 = 0; _i27 < _set26.size; ++_i27) {
                                                            List<Map<Insanity, String>> _elem28; // required
                                                            {
                                                                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                                                                _elem28 = new ArrayList<Map<Insanity, String>>(_list29.size);
                                                                for (int _i30 = 0; _i30 < _list29.size; ++_i30) {
                                                                    Map<Insanity, String> _elem31; // required
                                                                    {
                                                                        org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                                                                        _elem31 = new LinkedHashMap<Insanity, String>(2 * _map32.size);
                                                                        for (int _i33 = 0; _i33 < _map32.size; ++_i33) {
                                                                            Insanity _key34; // required
                                                                            String _val35; // required
                                                                            _key34 = new Insanity();
                                                                            _key34.read(iprot);
                                                                            _val35 = iprot.readString();
                                                                            _elem31.put(_key34, _val35);
                                                                        }
                                                                        iprot.readMapEnd();
                                                                    }
                                                                    _elem28.add(_elem31);
                                                                }
                                                                iprot.readListEnd();
                                                            }
                                                            _val25.add(_elem28);
                                                        }
                                                        iprot.readSetEnd();
                                                    }
                                                    _val18.put(_key24, _val25);
                                                }
                                                iprot.readMapEnd();
                                            }
                                            _elem14.put(_key17, _val18);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.list_field.add(_elem14);
                                }
                                iprot.readListEnd();
                            }
                            struct.setList_fieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // BINARY_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.binary_field = iprot.readBinary();
                            struct.setBinary_fieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, CrazyNesting struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.string_field != null) {
                oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
                oprot.writeString(struct.string_field);
                oprot.writeFieldEnd();
            }
            if (struct.set_field != null) {
                if (struct.isSetSet_field()) {
                    oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.set_field.size()));
                        for (Insanity _iter36 : struct.set_field) {
                            _iter36.write(oprot);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.list_field != null) {
                oprot.writeFieldBegin(LIST_FIELD_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.list_field.size()));
                    for (Map<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>> _iter37 : struct.list_field) {
                        {
                            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.SET, org.apache.thrift.protocol.TType.MAP, _iter37.size()));
                            for (Map.Entry<Set<Integer>, Map<Integer, Set<List<Map<Insanity, String>>>>> _iter38 : _iter37.entrySet()) {
                                {
                                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter38.getKey().size()));
                                    for (int _iter39 : _iter38.getKey()) {
                                        oprot.writeI32(_iter39);
                                    }
                                    oprot.writeSetEnd();
                                }
                                {
                                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, _iter38.getValue().size()));
                                    for (Map.Entry<Integer, Set<List<Map<Insanity, String>>>> _iter40 : _iter38.getValue().entrySet()) {
                                        oprot.writeI32(_iter40.getKey());
                                        {
                                            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, _iter40.getValue().size()));
                                            for (List<Map<Insanity, String>> _iter41 : _iter40.getValue()) {
                                                {
                                                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter41.size()));
                                                    for (Map<Insanity, String> _iter42 : _iter41) {
                                                        {
                                                            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRING, _iter42.size()));
                                                            for (Map.Entry<Insanity, String> _iter43 : _iter42.entrySet()) {
                                                                _iter43.getKey().write(oprot);
                                                                oprot.writeString(_iter43.getValue());
                                                            }
                                                            oprot.writeMapEnd();
                                                        }
                                                    }
                                                    oprot.writeListEnd();
                                                }
                                            }
                                            oprot.writeSetEnd();
                                        }
                                    }
                                    oprot.writeMapEnd();
                                }
                            }
                            oprot.writeMapEnd();
                        }
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.binary_field != null) {
                oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
                oprot.writeBinary(struct.binary_field);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

