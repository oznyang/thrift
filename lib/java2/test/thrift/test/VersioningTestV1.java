/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.HashMap;
import java.util.Map;

public class VersioningTestV1 implements org.apache.thrift.TBase<VersioningTestV1, VersioningTestV1._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VersioningTestV1");

    private static final org.apache.thrift.protocol.TField BEGIN_IN_BOTH_FIELD_DESC = new org.apache.thrift.protocol.TField("begin_in_both", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField OLD_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("old_string", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField END_IN_BOTH_FIELD_DESC = new org.apache.thrift.protocol.TField("end_in_both", org.apache.thrift.protocol.TType.I32, (short) 12);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new VersioningTestV1StandardSchemeFactory());
    }

    private int begin_in_both; // required
    private String old_string; // required
    private int end_in_both; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    private static final int __BEGIN_IN_BOTH_ISSET_ID = 0;
    private static final int __END_IN_BOTH_ISSET_ID = 1;
    private byte __isset_bitfield = 0;

    public VersioningTestV1() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VersioningTestV1(VersioningTestV1 other) {
        __isset_bitfield = other.__isset_bitfield;
        this.begin_in_both = other.begin_in_both;
        if (other.isSetOld_string()) {
            this.old_string = other.old_string;
        }
        this.end_in_both = other.end_in_both;
    }

    public VersioningTestV1 deepCopy() {
        return new VersioningTestV1(this);
    }

    public void clear() {
        setBegin_in_bothIsSet(false);
        this.begin_in_both = 0;
        this.old_string = null;
        setEnd_in_bothIsSet(false);
        this.end_in_both = 0;
    }

    public int getBegin_in_both() {
        return this.begin_in_both;
    }

    public void setBegin_in_both(int begin_in_both) {
        this.begin_in_both = begin_in_both;
        setBegin_in_bothIsSet(true);
    }

    public void unsetBegin_in_both() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGIN_IN_BOTH_ISSET_ID);
    }

    /**
     * Returns true if field begin_in_both is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBegin_in_both() {
        return EncodingUtils.testBit(__isset_bitfield, __BEGIN_IN_BOTH_ISSET_ID);
    }

    public void setBegin_in_bothIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGIN_IN_BOTH_ISSET_ID, value);
    }

    public String getOld_string() {
        return this.old_string;
    }

    public void setOld_string(String old_string) {
        this.old_string = old_string;
    }

    public void unsetOld_string() {
        this.old_string = null;
    }

    /**
     * Returns true if field old_string is set (has been assigned a value) and false otherwise
     */
    public boolean isSetOld_string() {
        return this.old_string != null;
    }

    public void setOld_stringIsSet(boolean value) {
        if (!value) {
            this.old_string = null;
        }
    }

    public int getEnd_in_both() {
        return this.end_in_both;
    }

    public void setEnd_in_both(int end_in_both) {
        this.end_in_both = end_in_both;
        setEnd_in_bothIsSet(true);
    }

    public void unsetEnd_in_both() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_IN_BOTH_ISSET_ID);
    }

    /**
     * Returns true if field end_in_both is set (has been assigned a value) and false otherwise
     */
    public boolean isSetEnd_in_both() {
        return EncodingUtils.testBit(__isset_bitfield, __END_IN_BOTH_ISSET_ID);
    }

    public void setEnd_in_bothIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_IN_BOTH_ISSET_ID, value);
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(VersioningTestV1 other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class VersioningTestV1StandardSchemeFactory implements SchemeFactory {

        public VersioningTestV1StandardScheme getScheme() {
            return new VersioningTestV1StandardScheme();
        }
    }

    private static class VersioningTestV1StandardScheme extends StandardScheme<VersioningTestV1> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, VersioningTestV1 struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BEGIN_IN_BOTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.begin_in_both = iprot.readI32();
                            struct.setBegin_in_bothIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // OLD_STRING
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.old_string = iprot.readString();
                            struct.setOld_stringIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // END_IN_BOTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.end_in_both = iprot.readI32();
                            struct.setEnd_in_bothIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, VersioningTestV1 struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(BEGIN_IN_BOTH_FIELD_DESC);
            oprot.writeI32(struct.begin_in_both);
            oprot.writeFieldEnd();
            if (struct.old_string != null) {
                oprot.writeFieldBegin(OLD_STRING_FIELD_DESC);
                oprot.writeString(struct.old_string);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(END_IN_BOTH_FIELD_DESC);
            oprot.writeI32(struct.end_in_both);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

