/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ListBonks implements org.apache.thrift.TBase<ListBonks, ListBonks._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListBonks");

    private static final org.apache.thrift.protocol.TField BONK_FIELD_DESC = new org.apache.thrift.protocol.TField("bonk", org.apache.thrift.protocol.TType.LIST, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new ListBonksStandardSchemeFactory());
    }

    private List<Bonk> bonk; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public ListBonks() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ListBonks(ListBonks other) {
        if (other.isSetBonk()) {
            List<Bonk> __this__bonk = new ArrayList<Bonk>();
            for (Bonk other_element : other.bonk) {
                __this__bonk.add(new Bonk(other_element));
            }
            this.bonk = __this__bonk;
        }
    }

    public ListBonks deepCopy() {
        return new ListBonks(this);
    }

    public void clear() {
        this.bonk = null;
    }

    public int getBonkSize() {
        return (this.bonk == null) ? 0 : this.bonk.size();
    }

    public java.util.Iterator<Bonk> getBonkIterator() {
        return (this.bonk == null) ? null : this.bonk.iterator();
    }

    public void addToBonk(Bonk elem) {
        if (this.bonk == null) {
            this.bonk = new ArrayList<Bonk>();
        }
        this.bonk.add(elem);
    }

    public List<Bonk> getBonk() {
        return this.bonk;
    }

    public void setBonk(List<Bonk> bonk) {
        this.bonk = bonk;
    }

    public void unsetBonk() {
        this.bonk = null;
    }

    /**
     * Returns true if field bonk is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBonk() {
        return this.bonk != null;
    }

    public void setBonkIsSet(boolean value) {
        if (!value) {
            this.bonk = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(ListBonks other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class ListBonksStandardSchemeFactory implements SchemeFactory {

        public ListBonksStandardScheme getScheme() {
            return new ListBonksStandardScheme();
        }
    }

    private static class ListBonksStandardScheme extends StandardScheme<ListBonks> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ListBonks struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BONK
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                                struct.bonk = new ArrayList<Bonk>(_list128.size);
                                for (int _i129 = 0; _i129 < _list128.size; ++_i129) {
                                    Bonk _elem130; // required
                                    _elem130 = new Bonk();
                                    _elem130.read(iprot);
                                    struct.bonk.add(_elem130);
                                }
                                iprot.readListEnd();
                            }
                            struct.setBonkIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ListBonks struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.bonk != null) {
                oprot.writeFieldBegin(BONK_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bonk.size()));
                    for (Bonk _iter131 : struct.bonk) {
                        _iter131.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

