/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.*;

public class NestedMixedx2 implements org.apache.thrift.TBase<NestedMixedx2, NestedMixedx2._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NestedMixedx2");

    private static final org.apache.thrift.protocol.TField INT_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("int_set_list", org.apache.thrift.protocol.TType.LIST, (short) 1);
    private static final org.apache.thrift.protocol.TField MAP_INT_STRSET_FIELD_DESC = new org.apache.thrift.protocol.TField("map_int_strset", org.apache.thrift.protocol.TType.MAP, (short) 2);
    private static final org.apache.thrift.protocol.TField MAP_INT_STRSET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("map_int_strset_list", org.apache.thrift.protocol.TType.LIST, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new NestedMixedx2StandardSchemeFactory());
    }

    private List<Set<Integer>> int_set_list; // required
    private Map<Integer, Set<String>> map_int_strset; // required
    private List<Map<Integer, Set<String>>> map_int_strset_list; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public NestedMixedx2() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NestedMixedx2(NestedMixedx2 other) {
        if (other.isSetInt_set_list()) {
            List<Set<Integer>> __this__int_set_list = new ArrayList<Set<Integer>>();
            for (Set<Integer> other_element : other.int_set_list) {
                Set<Integer> __this__int_set_list_copy = new HashSet<Integer>();
                for (Integer other_element_element : other_element) {
                    __this__int_set_list_copy.add(other_element_element);
                }
                __this__int_set_list.add(__this__int_set_list_copy);
            }
            this.int_set_list = __this__int_set_list;
        }
        if (other.isSetMap_int_strset()) {
            Map<Integer, Set<String>> __this__map_int_strset = new LinkedHashMap<Integer, Set<String>>();
            for (Map.Entry<Integer, Set<String>> other_element : other.map_int_strset.entrySet()) {

                Integer other_element_key = other_element.getKey();
                Set<String> other_element_value = other_element.getValue();

                Integer __this__map_int_strset_copy_key = other_element_key;

                Set<String> __this__map_int_strset_copy_value = new HashSet<String>();
                for (String other_element_value_element : other_element_value) {
                    __this__map_int_strset_copy_value.add(other_element_value_element);
                }

                __this__map_int_strset.put(__this__map_int_strset_copy_key, __this__map_int_strset_copy_value);
            }
            this.map_int_strset = __this__map_int_strset;
        }
        if (other.isSetMap_int_strset_list()) {
            List<Map<Integer, Set<String>>> __this__map_int_strset_list = new ArrayList<Map<Integer, Set<String>>>();
            for (Map<Integer, Set<String>> other_element : other.map_int_strset_list) {
                Map<Integer, Set<String>> __this__map_int_strset_list_copy = new LinkedHashMap<Integer, Set<String>>();
                for (Map.Entry<Integer, Set<String>> other_element_element : other_element.entrySet()) {

                    Integer other_element_element_key = other_element_element.getKey();
                    Set<String> other_element_element_value = other_element_element.getValue();

                    Integer __this__map_int_strset_list_copy_copy_key = other_element_element_key;

                    Set<String> __this__map_int_strset_list_copy_copy_value = new HashSet<String>();
                    for (String other_element_element_value_element : other_element_element_value) {
                        __this__map_int_strset_list_copy_copy_value.add(other_element_element_value_element);
                    }

                    __this__map_int_strset_list_copy.put(__this__map_int_strset_list_copy_copy_key, __this__map_int_strset_list_copy_copy_value);
                }
                __this__map_int_strset_list.add(__this__map_int_strset_list_copy);
            }
            this.map_int_strset_list = __this__map_int_strset_list;
        }
    }

    public NestedMixedx2 deepCopy() {
        return new NestedMixedx2(this);
    }

    public void clear() {
        this.int_set_list = null;
        this.map_int_strset = null;
        this.map_int_strset_list = null;
    }

    public int getInt_set_listSize() {
        return (this.int_set_list == null) ? 0 : this.int_set_list.size();
    }

    public java.util.Iterator<Set<Integer>> getInt_set_listIterator() {
        return (this.int_set_list == null) ? null : this.int_set_list.iterator();
    }

    public void addToInt_set_list(Set<Integer> elem) {
        if (this.int_set_list == null) {
            this.int_set_list = new ArrayList<Set<Integer>>();
        }
        this.int_set_list.add(elem);
    }

    public List<Set<Integer>> getInt_set_list() {
        return this.int_set_list;
    }

    public void setInt_set_list(List<Set<Integer>> int_set_list) {
        this.int_set_list = int_set_list;
    }

    public void unsetInt_set_list() {
        this.int_set_list = null;
    }

    /**
     * Returns true if field int_set_list is set (has been assigned a value) and false otherwise
     */
    public boolean isSetInt_set_list() {
        return this.int_set_list != null;
    }

    public void setInt_set_listIsSet(boolean value) {
        if (!value) {
            this.int_set_list = null;
        }
    }

    public int getMap_int_strsetSize() {
        return (this.map_int_strset == null) ? 0 : this.map_int_strset.size();
    }

    public void putToMap_int_strset(int key, Set<String> val) {
        if (this.map_int_strset == null) {
            this.map_int_strset = new LinkedHashMap<Integer, Set<String>>();
        }
        this.map_int_strset.put(key, val);
    }

    public Map<Integer, Set<String>> getMap_int_strset() {
        return this.map_int_strset;
    }

    public void setMap_int_strset(Map<Integer, Set<String>> map_int_strset) {
        this.map_int_strset = map_int_strset;
    }

    public void unsetMap_int_strset() {
        this.map_int_strset = null;
    }

    /**
     * Returns true if field map_int_strset is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMap_int_strset() {
        return this.map_int_strset != null;
    }

    public void setMap_int_strsetIsSet(boolean value) {
        if (!value) {
            this.map_int_strset = null;
        }
    }

    public int getMap_int_strset_listSize() {
        return (this.map_int_strset_list == null) ? 0 : this.map_int_strset_list.size();
    }

    public java.util.Iterator<Map<Integer, Set<String>>> getMap_int_strset_listIterator() {
        return (this.map_int_strset_list == null) ? null : this.map_int_strset_list.iterator();
    }

    public void addToMap_int_strset_list(Map<Integer, Set<String>> elem) {
        if (this.map_int_strset_list == null) {
            this.map_int_strset_list = new ArrayList<Map<Integer, Set<String>>>();
        }
        this.map_int_strset_list.add(elem);
    }

    public List<Map<Integer, Set<String>>> getMap_int_strset_list() {
        return this.map_int_strset_list;
    }

    public void setMap_int_strset_list(List<Map<Integer, Set<String>>> map_int_strset_list) {
        this.map_int_strset_list = map_int_strset_list;
    }

    public void unsetMap_int_strset_list() {
        this.map_int_strset_list = null;
    }

    /**
     * Returns true if field map_int_strset_list is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMap_int_strset_list() {
        return this.map_int_strset_list != null;
    }

    public void setMap_int_strset_listIsSet(boolean value) {
        if (!value) {
            this.map_int_strset_list = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(NestedMixedx2 other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class NestedMixedx2StandardSchemeFactory implements SchemeFactory {

        public NestedMixedx2StandardScheme getScheme() {
            return new NestedMixedx2StandardScheme();
        }
    }

    private static class NestedMixedx2StandardScheme extends StandardScheme<NestedMixedx2> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, NestedMixedx2 struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // INT_SET_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                                struct.int_set_list = new ArrayList<Set<Integer>>(_list98.size);
                                for (int _i99 = 0; _i99 < _list98.size; ++_i99) {
                                    Set<Integer> _elem100; // required
                                    {
                                        org.apache.thrift.protocol.TSet _set101 = iprot.readSetBegin();
                                        _elem100 = new HashSet<Integer>(2 * _set101.size);
                                        for (int _i102 = 0; _i102 < _set101.size; ++_i102) {
                                            int _elem103; // required
                                            _elem103 = iprot.readI32();
                                            _elem100.add(_elem103);
                                        }
                                        iprot.readSetEnd();
                                    }
                                    struct.int_set_list.add(_elem100);
                                }
                                iprot.readListEnd();
                            }
                            struct.setInt_set_listIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MAP_INT_STRSET
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
                                struct.map_int_strset = new LinkedHashMap<Integer, Set<String>>(2 * _map104.size);
                                for (int _i105 = 0; _i105 < _map104.size; ++_i105) {
                                    int _key106; // required
                                    Set<String> _val107; // required
                                    _key106 = iprot.readI32();
                                    {
                                        org.apache.thrift.protocol.TSet _set108 = iprot.readSetBegin();
                                        _val107 = new HashSet<String>(2 * _set108.size);
                                        for (int _i109 = 0; _i109 < _set108.size; ++_i109) {
                                            String _elem110; // required
                                            _elem110 = iprot.readString();
                                            _val107.add(_elem110);
                                        }
                                        iprot.readSetEnd();
                                    }
                                    struct.map_int_strset.put(_key106, _val107);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setMap_int_strsetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // MAP_INT_STRSET_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list111 = iprot.readListBegin();
                                struct.map_int_strset_list = new ArrayList<Map<Integer, Set<String>>>(_list111.size);
                                for (int _i112 = 0; _i112 < _list111.size; ++_i112) {
                                    Map<Integer, Set<String>> _elem113; // required
                                    {
                                        org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
                                        _elem113 = new LinkedHashMap<Integer, Set<String>>(2 * _map114.size);
                                        for (int _i115 = 0; _i115 < _map114.size; ++_i115) {
                                            int _key116; // required
                                            Set<String> _val117; // required
                                            _key116 = iprot.readI32();
                                            {
                                                org.apache.thrift.protocol.TSet _set118 = iprot.readSetBegin();
                                                _val117 = new HashSet<String>(2 * _set118.size);
                                                for (int _i119 = 0; _i119 < _set118.size; ++_i119) {
                                                    String _elem120; // required
                                                    _elem120 = iprot.readString();
                                                    _val117.add(_elem120);
                                                }
                                                iprot.readSetEnd();
                                            }
                                            _elem113.put(_key116, _val117);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.map_int_strset_list.add(_elem113);
                                }
                                iprot.readListEnd();
                            }
                            struct.setMap_int_strset_listIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, NestedMixedx2 struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.int_set_list != null) {
                oprot.writeFieldBegin(INT_SET_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, struct.int_set_list.size()));
                    for (Set<Integer> _iter121 : struct.int_set_list) {
                        {
                            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter121.size()));
                            for (int _iter122 : _iter121) {
                                oprot.writeI32(_iter122);
                            }
                            oprot.writeSetEnd();
                        }
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.map_int_strset != null) {
                oprot.writeFieldBegin(MAP_INT_STRSET_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.map_int_strset.size()));
                    for (Map.Entry<Integer, Set<String>> _iter123 : struct.map_int_strset.entrySet()) {
                        oprot.writeI32(_iter123.getKey());
                        {
                            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter123.getValue().size()));
                            for (String _iter124 : _iter123.getValue()) {
                                oprot.writeString(_iter124);
                            }
                            oprot.writeSetEnd();
                        }
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.map_int_strset_list != null) {
                oprot.writeFieldBegin(MAP_INT_STRSET_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.map_int_strset_list.size()));
                    for (Map<Integer, Set<String>> _iter125 : struct.map_int_strset_list) {
                        {
                            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, _iter125.size()));
                            for (Map.Entry<Integer, Set<String>> _iter126 : _iter125.entrySet()) {
                                oprot.writeI32(_iter126.getKey());
                                {
                                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter126.getValue().size()));
                                    for (String _iter127 : _iter126.getValue()) {
                                        oprot.writeString(_iter127);
                                    }
                                    oprot.writeSetEnd();
                                }
                            }
                            oprot.writeMapEnd();
                        }
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

