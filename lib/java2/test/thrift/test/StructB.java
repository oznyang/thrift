/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.HashMap;
import java.util.Map;

public class StructB implements org.apache.thrift.TBase<StructB, StructB._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StructB");

    private static final org.apache.thrift.protocol.TField AA_FIELD_DESC = new org.apache.thrift.protocol.TField("aa", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField AB_FIELD_DESC = new org.apache.thrift.protocol.TField("ab", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new StructBStandardSchemeFactory());
    }

    private StructA aa; // optional
    private StructA ab; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public StructB() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StructB(StructB other) {
        if (other.isSetAa()) {
            this.aa = new StructA(other.aa);
        }
        if (other.isSetAb()) {
            this.ab = new StructA(other.ab);
        }
    }

    public StructB deepCopy() {
        return new StructB(this);
    }

    public void clear() {
        this.aa = null;
        this.ab = null;
    }

    public StructA getAa() {
        return this.aa;
    }

    public void setAa(StructA aa) {
        this.aa = aa;
    }

    public void unsetAa() {
        this.aa = null;
    }

    /**
     * Returns true if field aa is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAa() {
        return this.aa != null;
    }

    public void setAaIsSet(boolean value) {
        if (!value) {
            this.aa = null;
        }
    }

    public StructA getAb() {
        return this.ab;
    }

    public void setAb(StructA ab) {
        this.ab = ab;
    }

    public void unsetAb() {
        this.ab = null;
    }

    /**
     * Returns true if field ab is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAb() {
        return this.ab != null;
    }

    public void setAbIsSet(boolean value) {
        if (!value) {
            this.ab = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(StructB other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        if (!isSetAb()) {
            throw new TProtocolException("Required field 'ab' is unset! Struct:" + toString());
        }

        // check for sub-struct validity
        if (aa != null) {
            aa.validate();
        }
        if (ab != null) {
            ab.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class StructBStandardSchemeFactory implements SchemeFactory {

        public StructBStandardScheme getScheme() {
            return new StructBStandardScheme();
        }
    }

    private static class StructBStandardScheme extends StandardScheme<StructB> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, StructB struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // AA
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.aa = new StructA();
                            struct.aa.read(iprot);
                            struct.setAaIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // AB
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ab = new StructA();
                            struct.ab.read(iprot);
                            struct.setAbIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, StructB struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.aa != null) {
                if (struct.isSetAa()) {
                    oprot.writeFieldBegin(AA_FIELD_DESC);
                    struct.aa.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.ab != null) {
                oprot.writeFieldBegin(AB_FIELD_DESC);
                struct.ab.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

