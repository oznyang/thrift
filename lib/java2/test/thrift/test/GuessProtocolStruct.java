/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class GuessProtocolStruct implements org.apache.thrift.TBase<GuessProtocolStruct, GuessProtocolStruct._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GuessProtocolStruct");

    private static final org.apache.thrift.protocol.TField MAP_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("map_field", org.apache.thrift.protocol.TType.MAP, (short) 7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new GuessProtocolStructStandardSchemeFactory());
    }

    private Map<String, String> map_field; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public GuessProtocolStruct() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GuessProtocolStruct(GuessProtocolStruct other) {
        if (other.isSetMap_field()) {
            Map<String, String> __this__map_field = new LinkedHashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.map_field.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__map_field_copy_key = other_element_key;

                String __this__map_field_copy_value = other_element_value;

                __this__map_field.put(__this__map_field_copy_key, __this__map_field_copy_value);
            }
            this.map_field = __this__map_field;
        }
    }

    public GuessProtocolStruct deepCopy() {
        return new GuessProtocolStruct(this);
    }

    public void clear() {
        this.map_field = null;
    }

    public int getMap_fieldSize() {
        return (this.map_field == null) ? 0 : this.map_field.size();
    }

    public void putToMap_field(String key, String val) {
        if (this.map_field == null) {
            this.map_field = new LinkedHashMap<String, String>();
        }
        this.map_field.put(key, val);
    }

    public Map<String, String> getMap_field() {
        return this.map_field;
    }

    public void setMap_field(Map<String, String> map_field) {
        this.map_field = map_field;
    }

    public void unsetMap_field() {
        this.map_field = null;
    }

    /**
     * Returns true if field map_field is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMap_field() {
        return this.map_field != null;
    }

    public void setMap_fieldIsSet(boolean value) {
        if (!value) {
            this.map_field = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(GuessProtocolStruct other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class GuessProtocolStructStandardSchemeFactory implements SchemeFactory {

        public GuessProtocolStructStandardScheme getScheme() {
            return new GuessProtocolStructStandardScheme();
        }
    }

    private static class GuessProtocolStructStandardScheme extends StandardScheme<GuessProtocolStruct> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, GuessProtocolStruct struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 7: // MAP_FIELD
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
                                struct.map_field = new LinkedHashMap<String, String>(2 * _map65.size);
                                for (int _i66 = 0; _i66 < _map65.size; ++_i66) {
                                    String _key67; // required
                                    String _val68; // required
                                    _key67 = iprot.readString();
                                    _val68 = iprot.readString();
                                    struct.map_field.put(_key67, _val68);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setMap_fieldIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, GuessProtocolStruct struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.map_field != null) {
                oprot.writeFieldBegin(MAP_FIELD_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.map_field.size()));
                    for (Map.Entry<String, String> _iter69 : struct.map_field.entrySet()) {
                        oprot.writeString(_iter69.getKey());
                        oprot.writeString(_iter69.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

