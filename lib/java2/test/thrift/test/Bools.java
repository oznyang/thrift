/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.HashMap;
import java.util.Map;

public class Bools implements org.apache.thrift.TBase<Bools, Bools._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Bools");

    private static final org.apache.thrift.protocol.TField IM_TRUE_FIELD_DESC = new org.apache.thrift.protocol.TField("im_true", org.apache.thrift.protocol.TType.BOOL, (short) 1);
    private static final org.apache.thrift.protocol.TField IM_FALSE_FIELD_DESC = new org.apache.thrift.protocol.TField("im_false", org.apache.thrift.protocol.TType.BOOL, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new BoolsStandardSchemeFactory());
    }

    private boolean im_true; // required
    private boolean im_false; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    private static final int __IM_TRUE_ISSET_ID = 0;
    private static final int __IM_FALSE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;

    public Bools() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Bools(Bools other) {
        __isset_bitfield = other.__isset_bitfield;
        this.im_true = other.im_true;
        this.im_false = other.im_false;
    }

    public Bools deepCopy() {
        return new Bools(this);
    }

    public void clear() {
        setIm_trueIsSet(false);
        this.im_true = false;
        setIm_falseIsSet(false);
        this.im_false = false;
    }

    public boolean isIm_true() {
        return this.im_true;
    }

    public void setIm_true(boolean im_true) {
        this.im_true = im_true;
        setIm_trueIsSet(true);
    }

    public void unsetIm_true() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IM_TRUE_ISSET_ID);
    }

    /**
     * Returns true if field im_true is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIm_true() {
        return EncodingUtils.testBit(__isset_bitfield, __IM_TRUE_ISSET_ID);
    }

    public void setIm_trueIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IM_TRUE_ISSET_ID, value);
    }

    public boolean isIm_false() {
        return this.im_false;
    }

    public void setIm_false(boolean im_false) {
        this.im_false = im_false;
        setIm_falseIsSet(true);
    }

    public void unsetIm_false() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IM_FALSE_ISSET_ID);
    }

    /**
     * Returns true if field im_false is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIm_false() {
        return EncodingUtils.testBit(__isset_bitfield, __IM_FALSE_ISSET_ID);
    }

    public void setIm_falseIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IM_FALSE_ISSET_ID, value);
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(Bools other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class BoolsStandardSchemeFactory implements SchemeFactory {

        public BoolsStandardScheme getScheme() {
            return new BoolsStandardScheme();
        }
    }

    private static class BoolsStandardScheme extends StandardScheme<Bools> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Bools struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // IM_TRUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.im_true = iprot.readBool();
                            struct.setIm_trueIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IM_FALSE
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.im_false = iprot.readBool();
                            struct.setIm_falseIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Bools struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(IM_TRUE_FIELD_DESC);
            oprot.writeBool(struct.im_true);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(IM_FALSE_FIELD_DESC);
            oprot.writeBool(struct.im_false);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

