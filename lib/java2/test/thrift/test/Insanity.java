/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.*;

public class Insanity implements org.apache.thrift.TBase<Insanity, Insanity._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Insanity");

    private static final org.apache.thrift.protocol.TField USER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("userMap", org.apache.thrift.protocol.TType.MAP, (short) 1);
    private static final org.apache.thrift.protocol.TField XTRUCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("xtructs", org.apache.thrift.protocol.TType.LIST, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new InsanityStandardSchemeFactory());
    }

    private Map<Numberz, Long> userMap; // required
    private List<Xtruct> xtructs; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public Insanity() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Insanity(Insanity other) {
        if (other.isSetUserMap()) {
            Map<Numberz, Long> __this__userMap = new LinkedHashMap<Numberz, Long>();
            for (Map.Entry<Numberz, Long> other_element : other.userMap.entrySet()) {

                Numberz other_element_key = other_element.getKey();
                Long other_element_value = other_element.getValue();

                Numberz __this__userMap_copy_key = other_element_key;

                Long __this__userMap_copy_value = other_element_value;

                __this__userMap.put(__this__userMap_copy_key, __this__userMap_copy_value);
            }
            this.userMap = __this__userMap;
        }
        if (other.isSetXtructs()) {
            List<Xtruct> __this__xtructs = new ArrayList<Xtruct>();
            for (Xtruct other_element : other.xtructs) {
                __this__xtructs.add(new Xtruct(other_element));
            }
            this.xtructs = __this__xtructs;
        }
    }

    public Insanity deepCopy() {
        return new Insanity(this);
    }

    public void clear() {
        this.userMap = null;
        this.xtructs = null;
    }

    public int getUserMapSize() {
        return (this.userMap == null) ? 0 : this.userMap.size();
    }

    public void putToUserMap(Numberz key, long val) {
        if (this.userMap == null) {
            this.userMap = new LinkedHashMap<Numberz, Long>();
        }
        this.userMap.put(key, val);
    }

    public Map<Numberz, Long> getUserMap() {
        return this.userMap;
    }

    public void setUserMap(Map<Numberz, Long> userMap) {
        this.userMap = userMap;
    }

    public void unsetUserMap() {
        this.userMap = null;
    }

    /**
     * Returns true if field userMap is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUserMap() {
        return this.userMap != null;
    }

    public void setUserMapIsSet(boolean value) {
        if (!value) {
            this.userMap = null;
        }
    }

    public int getXtructsSize() {
        return (this.xtructs == null) ? 0 : this.xtructs.size();
    }

    public java.util.Iterator<Xtruct> getXtructsIterator() {
        return (this.xtructs == null) ? null : this.xtructs.iterator();
    }

    public void addToXtructs(Xtruct elem) {
        if (this.xtructs == null) {
            this.xtructs = new ArrayList<Xtruct>();
        }
        this.xtructs.add(elem);
    }

    public List<Xtruct> getXtructs() {
        return this.xtructs;
    }

    public void setXtructs(List<Xtruct> xtructs) {
        this.xtructs = xtructs;
    }

    public void unsetXtructs() {
        this.xtructs = null;
    }

    /**
     * Returns true if field xtructs is set (has been assigned a value) and false otherwise
     */
    public boolean isSetXtructs() {
        return this.xtructs != null;
    }

    public void setXtructsIsSet(boolean value) {
        if (!value) {
            this.xtructs = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(Insanity other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class InsanityStandardSchemeFactory implements SchemeFactory {

        public InsanityStandardScheme getScheme() {
            return new InsanityStandardScheme();
        }
    }

    private static class InsanityStandardScheme extends StandardScheme<Insanity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Insanity struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // USER_MAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                                struct.userMap = new LinkedHashMap<Numberz, Long>(2 * _map0.size);
                                for (int _i1 = 0; _i1 < _map0.size; ++_i1) {
                                    Numberz _key2; // required
                                    long _val3; // required
                                    _key2 = Numberz.findByValue(iprot.readI32());
                                    _val3 = iprot.readI64();
                                    struct.userMap.put(_key2, _val3);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setUserMapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // XTRUCTS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                                struct.xtructs = new ArrayList<Xtruct>(_list4.size);
                                for (int _i5 = 0; _i5 < _list4.size; ++_i5) {
                                    Xtruct _elem6; // required
                                    _elem6 = new Xtruct();
                                    _elem6.read(iprot);
                                    struct.xtructs.add(_elem6);
                                }
                                iprot.readListEnd();
                            }
                            struct.setXtructsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Insanity struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.userMap != null) {
                oprot.writeFieldBegin(USER_MAP_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.userMap.size()));
                    for (Map.Entry<Numberz, Long> _iter7 : struct.userMap.entrySet()) {
                        oprot.writeI32(_iter7.getKey().getValue());
                        oprot.writeI64(_iter7.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.xtructs != null) {
                oprot.writeFieldBegin(XTRUCTS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.xtructs.size()));
                    for (Xtruct _iter8 : struct.xtructs) {
                        _iter8.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

