/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.*;

public class VersioningTestV2 implements org.apache.thrift.TBase<VersioningTestV2, VersioningTestV2._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VersioningTestV2");

    private static final org.apache.thrift.protocol.TField BEGIN_IN_BOTH_FIELD_DESC = new org.apache.thrift.protocol.TField("begin_in_both", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField NEWINT_FIELD_DESC = new org.apache.thrift.protocol.TField("newint", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField NEWBYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("newbyte", org.apache.thrift.protocol.TType.BYTE, (short) 3);
    private static final org.apache.thrift.protocol.TField NEWSHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("newshort", org.apache.thrift.protocol.TType.I16, (short) 4);
    private static final org.apache.thrift.protocol.TField NEWLONG_FIELD_DESC = new org.apache.thrift.protocol.TField("newlong", org.apache.thrift.protocol.TType.I64, (short) 5);
    private static final org.apache.thrift.protocol.TField NEWDOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("newdouble", org.apache.thrift.protocol.TType.DOUBLE, (short) 6);
    private static final org.apache.thrift.protocol.TField NEWSTRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("newstruct", org.apache.thrift.protocol.TType.STRUCT, (short) 7);
    private static final org.apache.thrift.protocol.TField NEWLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("newlist", org.apache.thrift.protocol.TType.LIST, (short) 8);
    private static final org.apache.thrift.protocol.TField NEWSET_FIELD_DESC = new org.apache.thrift.protocol.TField("newset", org.apache.thrift.protocol.TType.SET, (short) 9);
    private static final org.apache.thrift.protocol.TField NEWMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("newmap", org.apache.thrift.protocol.TType.MAP, (short) 10);
    private static final org.apache.thrift.protocol.TField NEWSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("newstring", org.apache.thrift.protocol.TType.STRING, (short) 11);
    private static final org.apache.thrift.protocol.TField END_IN_BOTH_FIELD_DESC = new org.apache.thrift.protocol.TField("end_in_both", org.apache.thrift.protocol.TType.I32, (short) 12);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new VersioningTestV2StandardSchemeFactory());
    }

    private int begin_in_both; // required
    private int newint; // required
    private byte newbyte; // required
    private short newshort; // required
    private long newlong; // required
    private double newdouble; // required
    private Bonk newstruct; // required
    private List<Integer> newlist; // required
    private Set<Integer> newset; // required
    private Map<Integer, Integer> newmap; // required
    private String newstring; // required
    private int end_in_both; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    private static final int __BEGIN_IN_BOTH_ISSET_ID = 0;
    private static final int __NEWINT_ISSET_ID = 1;
    private static final int __NEWBYTE_ISSET_ID = 2;
    private static final int __NEWSHORT_ISSET_ID = 3;
    private static final int __NEWLONG_ISSET_ID = 4;
    private static final int __NEWDOUBLE_ISSET_ID = 5;
    private static final int __END_IN_BOTH_ISSET_ID = 6;
    private byte __isset_bitfield = 0;

    public VersioningTestV2() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public VersioningTestV2(VersioningTestV2 other) {
        __isset_bitfield = other.__isset_bitfield;
        this.begin_in_both = other.begin_in_both;
        this.newint = other.newint;
        this.newbyte = other.newbyte;
        this.newshort = other.newshort;
        this.newlong = other.newlong;
        this.newdouble = other.newdouble;
        if (other.isSetNewstruct()) {
            this.newstruct = new Bonk(other.newstruct);
        }
        if (other.isSetNewlist()) {
            List<Integer> __this__newlist = new ArrayList<Integer>();
            for (Integer other_element : other.newlist) {
                __this__newlist.add(other_element);
            }
            this.newlist = __this__newlist;
        }
        if (other.isSetNewset()) {
            Set<Integer> __this__newset = new HashSet<Integer>();
            for (Integer other_element : other.newset) {
                __this__newset.add(other_element);
            }
            this.newset = __this__newset;
        }
        if (other.isSetNewmap()) {
            Map<Integer, Integer> __this__newmap = new LinkedHashMap<Integer, Integer>();
            for (Map.Entry<Integer, Integer> other_element : other.newmap.entrySet()) {

                Integer other_element_key = other_element.getKey();
                Integer other_element_value = other_element.getValue();

                Integer __this__newmap_copy_key = other_element_key;

                Integer __this__newmap_copy_value = other_element_value;

                __this__newmap.put(__this__newmap_copy_key, __this__newmap_copy_value);
            }
            this.newmap = __this__newmap;
        }
        if (other.isSetNewstring()) {
            this.newstring = other.newstring;
        }
        this.end_in_both = other.end_in_both;
    }

    public VersioningTestV2 deepCopy() {
        return new VersioningTestV2(this);
    }

    public void clear() {
        setBegin_in_bothIsSet(false);
        this.begin_in_both = 0;
        setNewintIsSet(false);
        this.newint = 0;
        setNewbyteIsSet(false);
        this.newbyte = 0;
        setNewshortIsSet(false);
        this.newshort = 0;
        setNewlongIsSet(false);
        this.newlong = 0;
        setNewdoubleIsSet(false);
        this.newdouble = 0.0;
        this.newstruct = null;
        this.newlist = null;
        this.newset = null;
        this.newmap = null;
        this.newstring = null;
        setEnd_in_bothIsSet(false);
        this.end_in_both = 0;
    }

    public int getBegin_in_both() {
        return this.begin_in_both;
    }

    public void setBegin_in_both(int begin_in_both) {
        this.begin_in_both = begin_in_both;
        setBegin_in_bothIsSet(true);
    }

    public void unsetBegin_in_both() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGIN_IN_BOTH_ISSET_ID);
    }

    /**
     * Returns true if field begin_in_both is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBegin_in_both() {
        return EncodingUtils.testBit(__isset_bitfield, __BEGIN_IN_BOTH_ISSET_ID);
    }

    public void setBegin_in_bothIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGIN_IN_BOTH_ISSET_ID, value);
    }

    public int getNewint() {
        return this.newint;
    }

    public void setNewint(int newint) {
        this.newint = newint;
        setNewintIsSet(true);
    }

    public void unsetNewint() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWINT_ISSET_ID);
    }

    /**
     * Returns true if field newint is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewint() {
        return EncodingUtils.testBit(__isset_bitfield, __NEWINT_ISSET_ID);
    }

    public void setNewintIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWINT_ISSET_ID, value);
    }

    public byte getNewbyte() {
        return this.newbyte;
    }

    public void setNewbyte(byte newbyte) {
        this.newbyte = newbyte;
        setNewbyteIsSet(true);
    }

    public void unsetNewbyte() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWBYTE_ISSET_ID);
    }

    /**
     * Returns true if field newbyte is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewbyte() {
        return EncodingUtils.testBit(__isset_bitfield, __NEWBYTE_ISSET_ID);
    }

    public void setNewbyteIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWBYTE_ISSET_ID, value);
    }

    public short getNewshort() {
        return this.newshort;
    }

    public void setNewshort(short newshort) {
        this.newshort = newshort;
        setNewshortIsSet(true);
    }

    public void unsetNewshort() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSHORT_ISSET_ID);
    }

    /**
     * Returns true if field newshort is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewshort() {
        return EncodingUtils.testBit(__isset_bitfield, __NEWSHORT_ISSET_ID);
    }

    public void setNewshortIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSHORT_ISSET_ID, value);
    }

    public long getNewlong() {
        return this.newlong;
    }

    public void setNewlong(long newlong) {
        this.newlong = newlong;
        setNewlongIsSet(true);
    }

    public void unsetNewlong() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWLONG_ISSET_ID);
    }

    /**
     * Returns true if field newlong is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewlong() {
        return EncodingUtils.testBit(__isset_bitfield, __NEWLONG_ISSET_ID);
    }

    public void setNewlongIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWLONG_ISSET_ID, value);
    }

    public double getNewdouble() {
        return this.newdouble;
    }

    public void setNewdouble(double newdouble) {
        this.newdouble = newdouble;
        setNewdoubleIsSet(true);
    }

    public void unsetNewdouble() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWDOUBLE_ISSET_ID);
    }

    /**
     * Returns true if field newdouble is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewdouble() {
        return EncodingUtils.testBit(__isset_bitfield, __NEWDOUBLE_ISSET_ID);
    }

    public void setNewdoubleIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWDOUBLE_ISSET_ID, value);
    }

    public Bonk getNewstruct() {
        return this.newstruct;
    }

    public void setNewstruct(Bonk newstruct) {
        this.newstruct = newstruct;
    }

    public void unsetNewstruct() {
        this.newstruct = null;
    }

    /**
     * Returns true if field newstruct is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewstruct() {
        return this.newstruct != null;
    }

    public void setNewstructIsSet(boolean value) {
        if (!value) {
            this.newstruct = null;
        }
    }

    public int getNewlistSize() {
        return (this.newlist == null) ? 0 : this.newlist.size();
    }

    public java.util.Iterator<Integer> getNewlistIterator() {
        return (this.newlist == null) ? null : this.newlist.iterator();
    }

    public void addToNewlist(int elem) {
        if (this.newlist == null) {
            this.newlist = new ArrayList<Integer>();
        }
        this.newlist.add(elem);
    }

    public List<Integer> getNewlist() {
        return this.newlist;
    }

    public void setNewlist(List<Integer> newlist) {
        this.newlist = newlist;
    }

    public void unsetNewlist() {
        this.newlist = null;
    }

    /**
     * Returns true if field newlist is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewlist() {
        return this.newlist != null;
    }

    public void setNewlistIsSet(boolean value) {
        if (!value) {
            this.newlist = null;
        }
    }

    public int getNewsetSize() {
        return (this.newset == null) ? 0 : this.newset.size();
    }

    public java.util.Iterator<Integer> getNewsetIterator() {
        return (this.newset == null) ? null : this.newset.iterator();
    }

    public void addToNewset(int elem) {
        if (this.newset == null) {
            this.newset = new HashSet<Integer>();
        }
        this.newset.add(elem);
    }

    public Set<Integer> getNewset() {
        return this.newset;
    }

    public void setNewset(Set<Integer> newset) {
        this.newset = newset;
    }

    public void unsetNewset() {
        this.newset = null;
    }

    /**
     * Returns true if field newset is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewset() {
        return this.newset != null;
    }

    public void setNewsetIsSet(boolean value) {
        if (!value) {
            this.newset = null;
        }
    }

    public int getNewmapSize() {
        return (this.newmap == null) ? 0 : this.newmap.size();
    }

    public void putToNewmap(int key, int val) {
        if (this.newmap == null) {
            this.newmap = new LinkedHashMap<Integer, Integer>();
        }
        this.newmap.put(key, val);
    }

    public Map<Integer, Integer> getNewmap() {
        return this.newmap;
    }

    public void setNewmap(Map<Integer, Integer> newmap) {
        this.newmap = newmap;
    }

    public void unsetNewmap() {
        this.newmap = null;
    }

    /**
     * Returns true if field newmap is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewmap() {
        return this.newmap != null;
    }

    public void setNewmapIsSet(boolean value) {
        if (!value) {
            this.newmap = null;
        }
    }

    public String getNewstring() {
        return this.newstring;
    }

    public void setNewstring(String newstring) {
        this.newstring = newstring;
    }

    public void unsetNewstring() {
        this.newstring = null;
    }

    /**
     * Returns true if field newstring is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNewstring() {
        return this.newstring != null;
    }

    public void setNewstringIsSet(boolean value) {
        if (!value) {
            this.newstring = null;
        }
    }

    public int getEnd_in_both() {
        return this.end_in_both;
    }

    public void setEnd_in_both(int end_in_both) {
        this.end_in_both = end_in_both;
        setEnd_in_bothIsSet(true);
    }

    public void unsetEnd_in_both() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_IN_BOTH_ISSET_ID);
    }

    /**
     * Returns true if field end_in_both is set (has been assigned a value) and false otherwise
     */
    public boolean isSetEnd_in_both() {
        return EncodingUtils.testBit(__isset_bitfield, __END_IN_BOTH_ISSET_ID);
    }

    public void setEnd_in_bothIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_IN_BOTH_ISSET_ID, value);
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(VersioningTestV2 other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
        if (newstruct != null) {
            newstruct.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class VersioningTestV2StandardSchemeFactory implements SchemeFactory {

        public VersioningTestV2StandardScheme getScheme() {
            return new VersioningTestV2StandardScheme();
        }
    }

    private static class VersioningTestV2StandardScheme extends StandardScheme<VersioningTestV2> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, VersioningTestV2 struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BEGIN_IN_BOTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.begin_in_both = iprot.readI32();
                            struct.setBegin_in_bothIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NEWINT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.newint = iprot.readI32();
                            struct.setNewintIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NEWBYTE
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.newbyte = iprot.readByte();
                            struct.setNewbyteIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // NEWSHORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.newshort = iprot.readI16();
                            struct.setNewshortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // NEWLONG
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.newlong = iprot.readI64();
                            struct.setNewlongIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // NEWDOUBLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.newdouble = iprot.readDouble();
                            struct.setNewdoubleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // NEWSTRUCT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.newstruct = new Bonk();
                            struct.newstruct.read(iprot);
                            struct.setNewstructIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // NEWLIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                                struct.newlist = new ArrayList<Integer>(_list44.size);
                                for (int _i45 = 0; _i45 < _list44.size; ++_i45) {
                                    int _elem46; // required
                                    _elem46 = iprot.readI32();
                                    struct.newlist.add(_elem46);
                                }
                                iprot.readListEnd();
                            }
                            struct.setNewlistIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // NEWSET
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set47 = iprot.readSetBegin();
                                struct.newset = new HashSet<Integer>(2 * _set47.size);
                                for (int _i48 = 0; _i48 < _set47.size; ++_i48) {
                                    int _elem49; // required
                                    _elem49 = iprot.readI32();
                                    struct.newset.add(_elem49);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setNewsetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // NEWMAP
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                                struct.newmap = new LinkedHashMap<Integer, Integer>(2 * _map50.size);
                                for (int _i51 = 0; _i51 < _map50.size; ++_i51) {
                                    int _key52; // required
                                    int _val53; // required
                                    _key52 = iprot.readI32();
                                    _val53 = iprot.readI32();
                                    struct.newmap.put(_key52, _val53);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setNewmapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // NEWSTRING
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.newstring = iprot.readString();
                            struct.setNewstringIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // END_IN_BOTH
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.end_in_both = iprot.readI32();
                            struct.setEnd_in_bothIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, VersioningTestV2 struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(BEGIN_IN_BOTH_FIELD_DESC);
            oprot.writeI32(struct.begin_in_both);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(NEWINT_FIELD_DESC);
            oprot.writeI32(struct.newint);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(NEWBYTE_FIELD_DESC);
            oprot.writeByte(struct.newbyte);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(NEWSHORT_FIELD_DESC);
            oprot.writeI16(struct.newshort);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(NEWLONG_FIELD_DESC);
            oprot.writeI64(struct.newlong);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(NEWDOUBLE_FIELD_DESC);
            oprot.writeDouble(struct.newdouble);
            oprot.writeFieldEnd();
            if (struct.newstruct != null) {
                oprot.writeFieldBegin(NEWSTRUCT_FIELD_DESC);
                struct.newstruct.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.newlist != null) {
                oprot.writeFieldBegin(NEWLIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.newlist.size()));
                    for (int _iter54 : struct.newlist) {
                        oprot.writeI32(_iter54);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.newset != null) {
                oprot.writeFieldBegin(NEWSET_FIELD_DESC);
                {
                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.newset.size()));
                    for (int _iter55 : struct.newset) {
                        oprot.writeI32(_iter55);
                    }
                    oprot.writeSetEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.newmap != null) {
                oprot.writeFieldBegin(NEWMAP_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.newmap.size()));
                    for (Map.Entry<Integer, Integer> _iter56 : struct.newmap.entrySet()) {
                        oprot.writeI32(_iter56.getKey());
                        oprot.writeI32(_iter56.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.newstring != null) {
                oprot.writeFieldBegin(NEWSTRING_FIELD_DESC);
                oprot.writeString(struct.newstring);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(END_IN_BOTH_FIELD_DESC);
            oprot.writeI32(struct.end_in_both);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

