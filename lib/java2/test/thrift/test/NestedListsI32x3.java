/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import org.apache.thrift.TException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NestedListsI32x3 implements org.apache.thrift.TBase<NestedListsI32x3, NestedListsI32x3._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NestedListsI32x3");

    private static final org.apache.thrift.protocol.TField INTEGERLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("integerlist", org.apache.thrift.protocol.TType.LIST, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new NestedListsI32x3StandardSchemeFactory());
    }

    private List<List<List<Integer>>> integerlist; // required

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        @Override
        public short getThriftFieldId() {
            return 0;
        }

        @Override
        public String getFieldName() {
            return null;
        }
    }

    // isset id assignments
    public NestedListsI32x3() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NestedListsI32x3(NestedListsI32x3 other) {
        if (other.isSetIntegerlist()) {
            List<List<List<Integer>>> __this__integerlist = new ArrayList<List<List<Integer>>>();
            for (List<List<Integer>> other_element : other.integerlist) {
                List<List<Integer>> __this__integerlist_copy = new ArrayList<List<Integer>>();
                for (List<Integer> other_element_element : other_element) {
                    List<Integer> __this__integerlist_copy_copy = new ArrayList<Integer>();
                    for (Integer other_element_element_element : other_element_element) {
                        __this__integerlist_copy_copy.add(other_element_element_element);
                    }
                    __this__integerlist_copy.add(__this__integerlist_copy_copy);
                }
                __this__integerlist.add(__this__integerlist_copy);
            }
            this.integerlist = __this__integerlist;
        }
    }

    public NestedListsI32x3 deepCopy() {
        return new NestedListsI32x3(this);
    }

    public void clear() {
        this.integerlist = null;
    }

    public int getIntegerlistSize() {
        return (this.integerlist == null) ? 0 : this.integerlist.size();
    }

    public java.util.Iterator<List<List<Integer>>> getIntegerlistIterator() {
        return (this.integerlist == null) ? null : this.integerlist.iterator();
    }

    public void addToIntegerlist(List<List<Integer>> elem) {
        if (this.integerlist == null) {
            this.integerlist = new ArrayList<List<List<Integer>>>();
        }
        this.integerlist.add(elem);
    }

    public List<List<List<Integer>>> getIntegerlist() {
        return this.integerlist;
    }

    public void setIntegerlist(List<List<List<Integer>>> integerlist) {
        this.integerlist = integerlist;
    }

    public void unsetIntegerlist() {
        this.integerlist = null;
    }

    /**
     * Returns true if field integerlist is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIntegerlist() {
        return this.integerlist != null;
    }

    public void setIntegerlistIsSet(boolean value) {
        if (!value) {
            this.integerlist = null;
        }
    }

    @Override
    public boolean isSet(_Fields field) {
        return false;
    }

    @Override
    public Object getFieldValue(_Fields field) {
        return null;
    }

    @Override
    public void setFieldValue(_Fields field, Object value) {
    }

    @Override
    public _Fields fieldForId(int fieldId) {
        return null;
    }

    public int compareTo(NestedListsI32x3 other) {
        return 0;
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te.getMessage());
        }
    }

    private static class NestedListsI32x3StandardSchemeFactory implements SchemeFactory {

        public NestedListsI32x3StandardScheme getScheme() {
            return new NestedListsI32x3StandardScheme();
        }
    }

    private static class NestedListsI32x3StandardScheme extends StandardScheme<NestedListsI32x3> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, NestedListsI32x3 struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // INTEGERLIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                                struct.integerlist = new ArrayList<List<List<Integer>>>(_list86.size);
                                for (int _i87 = 0; _i87 < _list86.size; ++_i87) {
                                    List<List<Integer>> _elem88; // required
                                    {
                                        org.apache.thrift.protocol.TList _list89 = iprot.readListBegin();
                                        _elem88 = new ArrayList<List<Integer>>(_list89.size);
                                        for (int _i90 = 0; _i90 < _list89.size; ++_i90) {
                                            List<Integer> _elem91; // required
                                            {
                                                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                                                _elem91 = new ArrayList<Integer>(_list92.size);
                                                for (int _i93 = 0; _i93 < _list92.size; ++_i93) {
                                                    int _elem94; // required
                                                    _elem94 = iprot.readI32();
                                                    _elem91.add(_elem94);
                                                }
                                                iprot.readListEnd();
                                            }
                                            _elem88.add(_elem91);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.integerlist.add(_elem88);
                                }
                                iprot.readListEnd();
                            }
                            struct.setIntegerlistIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, NestedListsI32x3 struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.integerlist != null) {
                oprot.writeFieldBegin(INTEGERLIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.integerlist.size()));
                    for (List<List<Integer>> _iter95 : struct.integerlist) {
                        {
                            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter95.size()));
                            for (List<Integer> _iter96 : _iter95) {
                                {
                                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter96.size()));
                                    for (int _iter97 : _iter96) {
                                        oprot.writeI32(_iter97);
                                    }
                                    oprot.writeListEnd();
                                }
                            }
                            oprot.writeListEnd();
                        }
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

}

